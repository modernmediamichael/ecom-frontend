{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.convertNeSwToNwSe = convertNeSwToNwSe;\nexports.convertNwSeToNeSw = convertNwSeToNeSw;\nexports.fitBounds = fitBounds;\nexports.meters2ScreenPixels = meters2ScreenPixels;\nexports.tile2LatLng = tile2LatLng;\nexports.latLng2Tile = latLng2Tile;\nexports.getTilesIds = getTilesIds;\n\nvar _log = require('./math/log2');\n\nvar _log2 = _interopRequireDefault(_log);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar GOOGLE_TILE_SIZE = 256;\n\nfunction latLng2World(_ref) {\n  var lat = _ref.lat,\n      lng = _ref.lng;\n  var sin = Math.sin(lat * Math.PI / 180);\n  var x = lng / 360 + 0.5;\n  var y = 0.5 - 0.25 * Math.log((1 + sin) / (1 - sin)) / Math.PI;\n  y = y < 0 // eslint-disable-line\n  ? 0 : y > 1 ? 1 : y;\n  return {\n    x: x,\n    y: y\n  };\n}\n\nfunction world2LatLng(_ref2) {\n  var x = _ref2.x,\n      y = _ref2.y;\n  var n = Math.PI - 2 * Math.PI * y; // TODO test that this is faster\n  // 360 * Math.atan(Math.exp((180 - y * 360) * Math.PI / 180)) / Math.PI - 90;\n\n  return {\n    lat: 180 / Math.PI * Math.atan(0.5 * (Math.exp(n) - Math.exp(-n))),\n    lng: x * 360 - 180\n  };\n} // Thank you wiki https://en.wikipedia.org/wiki/Geographic_coordinate_system\n\n\nfunction latLng2MetersPerDegree(_ref3) {\n  var lat = _ref3.lat;\n  var phi = lat * Math.PI / 180;\n  var metersPerLatDegree = 111132.92 - 559.82 * Math.cos(2 * phi) + 1.175 * Math.cos(4 * phi) - 0.0023 * Math.cos(6 * phi);\n  var metersPerLngDegree = 111412.84 * Math.cos(phi) - 93.5 * Math.cos(3 * phi) + 0.118 * Math.cos(5 * phi);\n  return {\n    metersPerLatDegree: metersPerLatDegree,\n    metersPerLngDegree: metersPerLngDegree\n  };\n}\n\nfunction meters2LatLngBounds(meters, _ref4) {\n  var lat = _ref4.lat,\n      lng = _ref4.lng;\n\n  var _latLng2MetersPerDegr = latLng2MetersPerDegree({\n    lat: lat\n  }),\n      metersPerLatDegree = _latLng2MetersPerDegr.metersPerLatDegree,\n      metersPerLngDegree = _latLng2MetersPerDegr.metersPerLngDegree;\n\n  var latDelta = 0.5 * meters / metersPerLatDegree;\n  var lngDelta = 0.5 * meters / metersPerLngDegree;\n  return {\n    nw: {\n      lat: lat - latDelta,\n      lng: lng - lngDelta\n    },\n    se: {\n      lat: lat + latDelta,\n      lng: lng + lngDelta\n    }\n  };\n}\n\nfunction meters2WorldSize(meters, _ref5) {\n  var lat = _ref5.lat,\n      lng = _ref5.lng;\n\n  var _meters2LatLngBounds = meters2LatLngBounds(meters, {\n    lat: lat,\n    lng: lng\n  }),\n      nw = _meters2LatLngBounds.nw,\n      se = _meters2LatLngBounds.se;\n\n  var nwWorld = latLng2World(nw);\n  var seWorld = latLng2World(se);\n  var w = Math.abs(seWorld.x - nwWorld.x);\n  var h = Math.abs(seWorld.y - nwWorld.y);\n  return {\n    w: w,\n    h: h\n  };\n}\n\nfunction fitNwSe(nw, se, width, height) {\n  var EPS = 0.000000001;\n  var nwWorld = latLng2World(nw);\n  var seWorld = latLng2World(se);\n  var dx = nwWorld.x < seWorld.x ? seWorld.x - nwWorld.x : 1 - nwWorld.x + seWorld.x;\n  var dy = seWorld.y - nwWorld.y;\n\n  if (dx <= 0 && dy <= 0) {\n    return null;\n  }\n\n  var zoomX = (0, _log2.default)(width / GOOGLE_TILE_SIZE / Math.abs(dx));\n  var zoomY = (0, _log2.default)(height / GOOGLE_TILE_SIZE / Math.abs(dy));\n  var zoom = Math.floor(EPS + Math.min(zoomX, zoomY)); // TODO find center just unproject middle world point\n\n  var middle = {\n    x: nwWorld.x < seWorld.x // eslint-disable-line\n    ? 0.5 * (nwWorld.x + seWorld.x) : nwWorld.x + seWorld.x - 1 > 0 ? 0.5 * (nwWorld.x + seWorld.x - 1) : 0.5 * (1 + nwWorld.x + seWorld.x),\n    y: 0.5 * (nwWorld.y + seWorld.y)\n  };\n  var scale = Math.pow(2, zoom);\n  var halfW = width / scale / GOOGLE_TILE_SIZE / 2;\n  var halfH = height / scale / GOOGLE_TILE_SIZE / 2;\n  var newNW = world2LatLng({\n    x: middle.x - halfW,\n    y: middle.y - halfH\n  });\n  var newSE = world2LatLng({\n    x: middle.x + halfW,\n    y: middle.y + halfH\n  });\n  return {\n    center: world2LatLng(middle),\n    zoom: zoom,\n    newBounds: {\n      nw: newNW,\n      se: newSE\n    }\n  };\n}\n\nfunction convertNeSwToNwSe(_ref6) {\n  var ne = _ref6.ne,\n      sw = _ref6.sw;\n  return {\n    nw: {\n      lat: ne.lat,\n      lng: sw.lng\n    },\n    se: {\n      lat: sw.lat,\n      lng: ne.lng\n    }\n  };\n}\n\nfunction convertNwSeToNeSw(_ref7) {\n  var nw = _ref7.nw,\n      se = _ref7.se;\n  return {\n    ne: {\n      lat: nw.lat,\n      lng: se.lng\n    },\n    sw: {\n      lat: se.lat,\n      lng: nw.lng\n    }\n  };\n}\n\nfunction fitBounds(_ref8, _ref9) {\n  var nw = _ref8.nw,\n      se = _ref8.se,\n      ne = _ref8.ne,\n      sw = _ref8.sw;\n  var width = _ref9.width,\n      height = _ref9.height;\n  var fittedData = void 0;\n\n  if (nw && se) {\n    fittedData = fitNwSe(nw, se, width, height);\n  } else {\n    var calculatedNwSe = convertNeSwToNwSe({\n      ne: ne,\n      sw: sw\n    });\n    fittedData = fitNwSe(calculatedNwSe.nw, calculatedNwSe.se, width, height);\n  }\n\n  return _extends({}, fittedData, {\n    newBounds: _extends({}, fittedData.newBounds, convertNwSeToNeSw(fittedData.newBounds))\n  });\n} // -------------------------------------------------------------------\n// Helpers to calc some markers size\n\n\nfunction meters2ScreenPixels(meters, _ref10, zoom) {\n  var lat = _ref10.lat,\n      lng = _ref10.lng;\n\n  var _meters2WorldSize = meters2WorldSize(meters, {\n    lat: lat,\n    lng: lng\n  }),\n      w = _meters2WorldSize.w,\n      h = _meters2WorldSize.h;\n\n  var scale = Math.pow(2, zoom);\n  var wScreen = w * scale * GOOGLE_TILE_SIZE;\n  var hScreen = h * scale * GOOGLE_TILE_SIZE;\n  return {\n    w: wScreen,\n    h: hScreen\n  };\n} // --------------------------------------------------\n// Helper functions for working with svg tiles, (examples coming soon)\n\n\nfunction tile2LatLng(_ref11, zoom) {\n  var x = _ref11.x,\n      y = _ref11.y;\n  var n = Math.PI - 2 * Math.PI * y / Math.pow(2, zoom);\n  return {\n    lat: 180 / Math.PI * Math.atan(0.5 * (Math.exp(n) - Math.exp(-n))),\n    lng: x / Math.pow(2, zoom) * 360 - 180\n  };\n}\n\nfunction latLng2Tile(_ref12, zoom) {\n  var lat = _ref12.lat,\n      lng = _ref12.lng;\n  var worldCoords = latLng2World({\n    lat: lat,\n    lng: lng\n  });\n  var scale = Math.pow(2, zoom);\n  return {\n    x: Math.floor(worldCoords.x * scale),\n    y: Math.floor(worldCoords.y * scale)\n  };\n}\n\nfunction getTilesIds(_ref13, zoom) {\n  var from = _ref13.from,\n      to = _ref13.to;\n  var scale = Math.pow(2, zoom);\n  var ids = [];\n\n  for (var x = from.x; x !== (to.x + 1) % scale; x = (x + 1) % scale) {\n    for (var y = from.y; y !== (to.y + 1) % scale; y = (y + 1) % scale) {\n      ids.push([zoom, x, y]);\n    }\n  }\n\n  return ids;\n}","map":{"version":3,"sources":["/Users/michaelmuniz/Desktop/client/node_modules/google-map-react/lib/utils/utils.js"],"names":["exports","__esModule","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","convertNeSwToNwSe","convertNwSeToNeSw","fitBounds","meters2ScreenPixels","tile2LatLng","latLng2Tile","getTilesIds","_log","require","_log2","_interopRequireDefault","obj","default","GOOGLE_TILE_SIZE","latLng2World","_ref","lat","lng","sin","Math","PI","x","y","log","world2LatLng","_ref2","n","atan","exp","latLng2MetersPerDegree","_ref3","phi","metersPerLatDegree","cos","metersPerLngDegree","meters2LatLngBounds","meters","_ref4","_latLng2MetersPerDegr","latDelta","lngDelta","nw","se","meters2WorldSize","_ref5","_meters2LatLngBounds","nwWorld","seWorld","w","abs","h","fitNwSe","width","height","EPS","dx","dy","zoomX","zoomY","zoom","floor","min","middle","scale","pow","halfW","halfH","newNW","newSE","center","newBounds","_ref6","ne","sw","_ref7","_ref8","_ref9","fittedData","calculatedNwSe","_ref10","_meters2WorldSize","wScreen","hScreen","_ref11","_ref12","worldCoords","_ref13","from","to","ids","push"],"mappings":"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","sourcesContent":["'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.convertNeSwToNwSe = convertNeSwToNwSe;\nexports.convertNwSeToNeSw = convertNwSeToNeSw;\nexports.fitBounds = fitBounds;\nexports.meters2ScreenPixels = meters2ScreenPixels;\nexports.tile2LatLng = tile2LatLng;\nexports.latLng2Tile = latLng2Tile;\nexports.getTilesIds = getTilesIds;\n\nvar _log = require('./math/log2');\n\nvar _log2 = _interopRequireDefault(_log);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar GOOGLE_TILE_SIZE = 256;\n\nfunction latLng2World(_ref) {\n  var lat = _ref.lat,\n      lng = _ref.lng;\n\n  var sin = Math.sin(lat * Math.PI / 180);\n  var x = lng / 360 + 0.5;\n  var y = 0.5 - 0.25 * Math.log((1 + sin) / (1 - sin)) / Math.PI;\n\n  y = y < 0 // eslint-disable-line\n  ? 0 : y > 1 ? 1 : y;\n  return { x: x, y: y };\n}\n\nfunction world2LatLng(_ref2) {\n  var x = _ref2.x,\n      y = _ref2.y;\n\n  var n = Math.PI - 2 * Math.PI * y;\n\n  // TODO test that this is faster\n  // 360 * Math.atan(Math.exp((180 - y * 360) * Math.PI / 180)) / Math.PI - 90;\n  return {\n    lat: 180 / Math.PI * Math.atan(0.5 * (Math.exp(n) - Math.exp(-n))),\n    lng: x * 360 - 180\n  };\n}\n\n// Thank you wiki https://en.wikipedia.org/wiki/Geographic_coordinate_system\nfunction latLng2MetersPerDegree(_ref3) {\n  var lat = _ref3.lat;\n\n  var phi = lat * Math.PI / 180;\n  var metersPerLatDegree = 111132.92 - 559.82 * Math.cos(2 * phi) + 1.175 * Math.cos(4 * phi) - 0.0023 * Math.cos(6 * phi);\n  var metersPerLngDegree = 111412.84 * Math.cos(phi) - 93.5 * Math.cos(3 * phi) + 0.118 * Math.cos(5 * phi);\n  return { metersPerLatDegree: metersPerLatDegree, metersPerLngDegree: metersPerLngDegree };\n}\n\nfunction meters2LatLngBounds(meters, _ref4) {\n  var lat = _ref4.lat,\n      lng = _ref4.lng;\n\n  var _latLng2MetersPerDegr = latLng2MetersPerDegree({\n    lat: lat\n  }),\n      metersPerLatDegree = _latLng2MetersPerDegr.metersPerLatDegree,\n      metersPerLngDegree = _latLng2MetersPerDegr.metersPerLngDegree;\n\n  var latDelta = 0.5 * meters / metersPerLatDegree;\n  var lngDelta = 0.5 * meters / metersPerLngDegree;\n\n  return {\n    nw: {\n      lat: lat - latDelta,\n      lng: lng - lngDelta\n    },\n    se: {\n      lat: lat + latDelta,\n      lng: lng + lngDelta\n    }\n  };\n}\n\nfunction meters2WorldSize(meters, _ref5) {\n  var lat = _ref5.lat,\n      lng = _ref5.lng;\n\n  var _meters2LatLngBounds = meters2LatLngBounds(meters, { lat: lat, lng: lng }),\n      nw = _meters2LatLngBounds.nw,\n      se = _meters2LatLngBounds.se;\n\n  var nwWorld = latLng2World(nw);\n  var seWorld = latLng2World(se);\n  var w = Math.abs(seWorld.x - nwWorld.x);\n  var h = Math.abs(seWorld.y - nwWorld.y);\n\n  return { w: w, h: h };\n}\n\nfunction fitNwSe(nw, se, width, height) {\n  var EPS = 0.000000001;\n  var nwWorld = latLng2World(nw);\n  var seWorld = latLng2World(se);\n  var dx = nwWorld.x < seWorld.x ? seWorld.x - nwWorld.x : 1 - nwWorld.x + seWorld.x;\n  var dy = seWorld.y - nwWorld.y;\n\n  if (dx <= 0 && dy <= 0) {\n    return null;\n  }\n\n  var zoomX = (0, _log2.default)(width / GOOGLE_TILE_SIZE / Math.abs(dx));\n  var zoomY = (0, _log2.default)(height / GOOGLE_TILE_SIZE / Math.abs(dy));\n  var zoom = Math.floor(EPS + Math.min(zoomX, zoomY));\n\n  // TODO find center just unproject middle world point\n  var middle = {\n    x: nwWorld.x < seWorld.x // eslint-disable-line\n    ? 0.5 * (nwWorld.x + seWorld.x) : nwWorld.x + seWorld.x - 1 > 0 ? 0.5 * (nwWorld.x + seWorld.x - 1) : 0.5 * (1 + nwWorld.x + seWorld.x),\n    y: 0.5 * (nwWorld.y + seWorld.y)\n  };\n\n  var scale = Math.pow(2, zoom);\n  var halfW = width / scale / GOOGLE_TILE_SIZE / 2;\n  var halfH = height / scale / GOOGLE_TILE_SIZE / 2;\n\n  var newNW = world2LatLng({\n    x: middle.x - halfW,\n    y: middle.y - halfH\n  });\n\n  var newSE = world2LatLng({\n    x: middle.x + halfW,\n    y: middle.y + halfH\n  });\n\n  return {\n    center: world2LatLng(middle),\n    zoom: zoom,\n    newBounds: {\n      nw: newNW,\n      se: newSE\n    }\n  };\n}\n\nfunction convertNeSwToNwSe(_ref6) {\n  var ne = _ref6.ne,\n      sw = _ref6.sw;\n\n  return {\n    nw: {\n      lat: ne.lat,\n      lng: sw.lng\n    },\n    se: {\n      lat: sw.lat,\n      lng: ne.lng\n    }\n  };\n}\n\nfunction convertNwSeToNeSw(_ref7) {\n  var nw = _ref7.nw,\n      se = _ref7.se;\n\n  return {\n    ne: {\n      lat: nw.lat,\n      lng: se.lng\n    },\n    sw: {\n      lat: se.lat,\n      lng: nw.lng\n    }\n  };\n}\n\nfunction fitBounds(_ref8, _ref9) {\n  var nw = _ref8.nw,\n      se = _ref8.se,\n      ne = _ref8.ne,\n      sw = _ref8.sw;\n  var width = _ref9.width,\n      height = _ref9.height;\n\n  var fittedData = void 0;\n\n  if (nw && se) {\n    fittedData = fitNwSe(nw, se, width, height);\n  } else {\n    var calculatedNwSe = convertNeSwToNwSe({ ne: ne, sw: sw });\n    fittedData = fitNwSe(calculatedNwSe.nw, calculatedNwSe.se, width, height);\n  }\n\n  return _extends({}, fittedData, {\n    newBounds: _extends({}, fittedData.newBounds, convertNwSeToNeSw(fittedData.newBounds))\n  });\n}\n\n// -------------------------------------------------------------------\n// Helpers to calc some markers size\n\nfunction meters2ScreenPixels(meters, _ref10, zoom) {\n  var lat = _ref10.lat,\n      lng = _ref10.lng;\n\n  var _meters2WorldSize = meters2WorldSize(meters, { lat: lat, lng: lng }),\n      w = _meters2WorldSize.w,\n      h = _meters2WorldSize.h;\n\n  var scale = Math.pow(2, zoom);\n  var wScreen = w * scale * GOOGLE_TILE_SIZE;\n  var hScreen = h * scale * GOOGLE_TILE_SIZE;\n  return {\n    w: wScreen,\n    h: hScreen\n  };\n}\n\n// --------------------------------------------------\n// Helper functions for working with svg tiles, (examples coming soon)\n\nfunction tile2LatLng(_ref11, zoom) {\n  var x = _ref11.x,\n      y = _ref11.y;\n\n  var n = Math.PI - 2 * Math.PI * y / Math.pow(2, zoom);\n\n  return {\n    lat: 180 / Math.PI * Math.atan(0.5 * (Math.exp(n) - Math.exp(-n))),\n    lng: x / Math.pow(2, zoom) * 360 - 180\n  };\n}\n\nfunction latLng2Tile(_ref12, zoom) {\n  var lat = _ref12.lat,\n      lng = _ref12.lng;\n\n  var worldCoords = latLng2World({ lat: lat, lng: lng });\n  var scale = Math.pow(2, zoom);\n\n  return {\n    x: Math.floor(worldCoords.x * scale),\n    y: Math.floor(worldCoords.y * scale)\n  };\n}\n\nfunction getTilesIds(_ref13, zoom) {\n  var from = _ref13.from,\n      to = _ref13.to;\n\n  var scale = Math.pow(2, zoom);\n\n  var ids = [];\n  for (var x = from.x; x !== (to.x + 1) % scale; x = (x + 1) % scale) {\n    for (var y = from.y; y !== (to.y + 1) % scale; y = (y + 1) % scale) {\n      ids.push([zoom, x, y]);\n    }\n  }\n\n  return ids;\n}"]},"metadata":{},"sourceType":"script"}