{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.enableEnterKey = undefined;\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar enableEnterKey = function enableEnterKey(input, autocomplete) {\n  var originalAddEventListener = input.addEventListener;\n\n  var addEventListenerWrapper = function addEventListenerWrapper(type, listener) {\n    if (type === \"keydown\") {\n      var originalListener = listener;\n\n      listener = function listener(event) {\n        // 0. get autocomplete div corresponing to input field\n        var pacContainer = getAutoCompleteContainer(autocomplete);\n\n        if (pacContainer) {\n          // 1. check if it is visible (check if display property is not 'none')\n          var suggestionsVisible = pacContainer.style.display !== 'none'; // 2. check if one of the suggestions is selected\n\n          var suggestionSelected = pacContainer.getElementsByClassName('pac-item-selected').length > 0; // return key press\n\n          if (event.which === 13 || event.keyCode === 13) {\n            // when user press enter while no suggestion is selected yet\n            if (suggestionsVisible && !suggestionSelected) {\n              // 3. make event from original event (copy)\n              var arrowDownEvent = JSON.parse(JSON.stringify(event, function (k, v) {\n                if (v instanceof Node) return 'Node';\n                if (v instanceof Window) return 'Window';\n                return v;\n              }, ' ')); // fake arrow down event to auto-select first suggestion (it will then be choosen by return down event)\n\n              arrowDownEvent.which = 40;\n              arrowDownEvent.keyCode = 40; // 4. send arrow down key press event (add simulated event) before return press\n\n              originalListener.apply(input, [arrowDownEvent]); // 5. preventDefault so form is not submitted\n\n              event.preventDefault();\n            } // when suggestion is already selected (by arrow key) and user presses return to choose it\n            else if (suggestionsVisible && suggestionSelected) {\n                // 5. preventDefault so form is not submitted\n                event.preventDefault();\n              } // if suggestions not visible do not prevent default (ex submit)\n\n          }\n        } else console.warn('could not find google autocomplete container'); // 6. send (original) return key press event\n\n\n        originalListener.apply(input, [event]);\n      };\n    }\n\n    originalAddEventListener.apply(input, [type, listener]);\n  };\n\n  input.addEventListener = addEventListenerWrapper;\n};\n\nvar getAutoCompleteContainer = function getAutoCompleteContainer(autocomplete) {\n  if (autocomplete && autocomplete.gm_accessors_) {\n    var place = autocomplete.gm_accessors_.place;\n    var placeKey = Object.keys(place).find(function (value) {\n      return (0, _typeof3.default)(place[value]) === 'object' && place[value].hasOwnProperty('gm_accessors_');\n    });\n    var input = place[placeKey].gm_accessors_.input[placeKey];\n    var inputKey = Object.keys(input).find(function (value) {\n      return input[value].classList && input[value].classList.contains('pac-container');\n    });\n    return input[inputKey];\n  } else console.warn('could not find google autocomplete container : incomplete autocomplete object');\n};\n\nexports.enableEnterKey = enableEnterKey;","map":{"version":3,"sources":["../../src/utils/suggestion-event.js"],"names":["enableEnterKey","originalAddEventListener","input","addEventListenerWrapper","type","originalListener","listener","pacContainer","getAutoCompleteContainer","suggestionsVisible","suggestionSelected","event","arrowDownEvent","v","console","autocomplete","place","placeKey","inputKey"],"mappings":"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","sourcesContent":["const enableEnterKey = (input, autocomplete) => {\n\tconst originalAddEventListener = input.addEventListener\n\n\tconst addEventListenerWrapper = (type, listener) => {\n\t\tif (type === \"keydown\") {\n\t\t\tconst originalListener = listener;\n\t\t\tlistener = (event) => {\n\t\t\t\t// 0. get autocomplete div corresponing to input field\n\t\t\t\tconst pacContainer = getAutoCompleteContainer(autocomplete);\n\t\t\t\tif (pacContainer) {\n\t\t\t\t\t// 1. check if it is visible (check if display property is not 'none')\n\t\t\t\t\tconst suggestionsVisible = pacContainer.style.display !== 'none';\n\n\t\t\t\t\t// 2. check if one of the suggestions is selected\n\t\t\t\t\tconst suggestionSelected = pacContainer.getElementsByClassName('pac-item-selected').length > 0;\n\n\t\t\t\t\t// return key press\n\t\t\t\t\tif (event.which === 13 || event.keyCode === 13) {\n\n\t\t\t\t\t\t// when user press enter while no suggestion is selected yet\n\t\t\t\t\t\tif (suggestionsVisible && !suggestionSelected) {\n\t\t\t\t\t\t\t// 3. make event from original event (copy)\n\t\t\t\t\t\t\tconst arrowDownEvent = JSON.parse(JSON.stringify(event, (k, v) =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (v instanceof Node) return 'Node';\n\t\t\t\t\t\t\t\tif (v instanceof Window) return 'Window';\n\t\t\t\t\t\t\t\treturn v;\n\t\t\t\t\t\t\t}, ' '));\n\t\t\t\t\t\t\t// fake arrow down event to auto-select first suggestion (it will then be choosen by return down event)\n\t\t\t\t\t\t\tarrowDownEvent.which = 40;\n\t\t\t\t\t\t\tarrowDownEvent.keyCode = 40;\n\n\t\t\t\t\t\t\t// 4. send arrow down key press event (add simulated event) before return press\n\t\t\t\t\t\t\toriginalListener.apply(input, [arrowDownEvent]);\n\n\t\t\t\t\t\t\t// 5. preventDefault so form is not submitted\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// when suggestion is already selected (by arrow key) and user presses return to choose it\n\t\t\t\t\t\telse if (suggestionsVisible && suggestionSelected)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// 5. preventDefault so form is not submitted\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// if suggestions not visible do not prevent default (ex submit)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse console.warn('could not find google autocomplete container'); \n\n\t\t\t\t// 6. send (original) return key press event\n\t\t\t\toriginalListener.apply(input, [event])\n\t\t\t}\n\t\t}\n\t\toriginalAddEventListener.apply(input, [type, listener])\n\t}\n\n\tinput.addEventListener = addEventListenerWrapper;\n};\n \nconst getAutoCompleteContainer = (autocomplete) => {\n\tif (autocomplete && autocomplete.gm_accessors_) {\n\t\tconst place = autocomplete.gm_accessors_.place;\n\n\t\tconst placeKey = Object.keys(place).find((value) => (\n\t\t\t (typeof(place[value]) === 'object') && (place[value].hasOwnProperty('gm_accessors_'))\n\t\t));\n\n\t\tconst input = place[placeKey].gm_accessors_.input[placeKey];\n\n\t\tconst inputKey = Object.keys(input).find((value) => (\n\t\t\t(input[value].classList && input[value].classList.contains('pac-container'))\n\t\t));\n\n\t\treturn input[inputKey];\n\t}\n\telse console.warn('could not find google autocomplete container : incomplete autocomplete object')\n}\n\nexport { enableEnterKey }"]},"metadata":{},"sourceType":"script"}