{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _axios = require('axios');\n\nvar _axios2 = _interopRequireDefault(_axios);\n\nvar _geolib = require('geolib');\n\nvar _geolib2 = _interopRequireDefault(_geolib);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nexports.default = function () {\n  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(_ref2) {\n    var apiKey = _ref2.apiKey,\n        query = _ref2.query,\n        locations = _ref2.locations;\n    var location, geolocationUrl, data, results, geometry, updatedLocations, nearestLocation, foundLocation;\n    return _regenerator2.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (apiKey) {\n              _context.next = 3;\n              break;\n            }\n\n            console.error('No Api key provided');\n            return _context.abrupt('return');\n\n          case 3:\n            if (query) {\n              _context.next = 6;\n              break;\n            }\n\n            console.error('Must provide a query for a location to be found');\n            return _context.abrupt('return');\n\n          case 6:\n            if (!(!locations || locations.length < 1)) {\n              _context.next = 9;\n              break;\n            }\n\n            console.error('You must provide locations in order to find the closest one');\n            return _context.abrupt('return');\n\n          case 9:\n            location = null;\n            _context.next = 12;\n            return (0, _axios2.default)({\n              method: 'get',\n              url: 'https://maps.googleapis.com/maps/api/geocode/json?components=postal_code:' + query + '|country:US&key=' + apiKey\n            });\n\n          case 12:\n            geolocationUrl = _context.sent;\n            data = geolocationUrl.data;\n            results = data.results;\n\n            if (results && results.length > 0) {\n              geometry = results[0].geometry;\n\n              if (geometry) {\n                location = geometry['location'];\n              }\n            }\n\n            if (location) {\n              _context.next = 19;\n              break;\n            }\n\n            console.error('No location found by that query, please try again');\n            return _context.abrupt('return');\n\n          case 19:\n            updatedLocations = {};\n            locations.forEach(function (loc, i) {\n              if (!loc['lat'] || !loc['lng']) {\n                console.warn(JSON.stringify(locations[i]) + ' will be omitted from the search, must have \\'lat\\' and \\'lng\\' fields');\n                return;\n              }\n\n              if (!loc['id']) {\n                console.warn('Location must have an id: ' + JSON.stringify(locations[i]));\n                return;\n              }\n\n              updatedLocations[loc['id']] = (0, _extends3.default)({}, loc, {\n                latitude: loc['lat'],\n                longitude: loc['lng']\n              });\n            });\n\n            if (!(Object.keys(updatedLocations).length < 1)) {\n              _context.next = 24;\n              break;\n            }\n\n            console.error('No locations to compare with');\n            return _context.abrupt('return');\n\n          case 24:\n            nearestLocation = _geolib2.default.findNearest(location, updatedLocations);\n            foundLocation = locations.find(function (loc) {\n              return loc['id'] === nearestLocation['key'];\n            });\n\n            if (foundLocation) {\n              _context.next = 29;\n              break;\n            }\n\n            console.error('No nearest location found');\n            return _context.abrupt('return');\n\n          case 29:\n            return _context.abrupt('return', foundLocation);\n\n          case 30:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, undefined);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = exports['default'];","map":{"version":3,"sources":["../../src/utils/location-close.js"],"names":["apiKey","query","locations","console","location","geolocationUrl","method","url","data","results","geometry","updatedLocations","loc","JSON","latitude","longitude","Object","nearestLocation","geolib","foundLocation"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport geolib from 'geolib'\n\nexport default async ({ apiKey, query, locations }) => {\n\tif (!apiKey) {\n\t\tconsole.error(`No Api key provided`)\n\t\treturn\n\t}\n\tif (!query) {\n\t\tconsole.error(`Must provide a query for a location to be found`)\n\t\treturn\n\t}\n\tif (!locations || locations.length < 1) {\n\t\tconsole.error(`You must provide locations in order to find the closest one`)\n\t\treturn\n\t}\n\tlet location = null\n\tconst geolocationUrl = await axios({\n\t\tmethod: `get`,\n\t\turl: `https://maps.googleapis.com/maps/api/geocode/json?components=postal_code:${query}|country:US&key=${apiKey}`\n\t})\n\tconst { data } = geolocationUrl\n\tconst { results } = data\n\tif (results && results.length > 0) {\n\t\tconst { geometry } = results[0]\n\t\tif (geometry) {\n\t\t\tlocation = geometry[`location`]\n\t\t}\n\t}\n\n\tif (!location) {\n\t\tconsole.error(`No location found by that query, please try again`)\n\t\treturn\n\t}\n\n\tlet updatedLocations = {}\n\tlocations.forEach((loc, i) => {\n\t\tif (!loc[`lat`] || !loc[`lng`]) {\n\t\t\tconsole.warn(\n\t\t\t\t`${JSON.stringify(\n\t\t\t\t\tlocations[i]\n\t\t\t\t)} will be omitted from the search, must have 'lat' and 'lng' fields`\n\t\t\t)\n\t\t\treturn\n\t\t}\n\t\tif (!loc[`id`]) {\n\t\t\tconsole.warn(`Location must have an id: ${JSON.stringify(locations[i])}`)\n\t\t\treturn\n\t\t}\n\t\tupdatedLocations[loc[`id`]] = {\n\t\t\t...loc,\n\t\t\tlatitude: loc[`lat`],\n\t\t\tlongitude: loc[`lng`]\n\t\t}\n\t})\n\n\tif (Object.keys(updatedLocations).length < 1) {\n\t\tconsole.error(`No locations to compare with`)\n\t\treturn\n\t}\n\tconst nearestLocation = geolib.findNearest(location, updatedLocations)\n\tconst foundLocation = locations.find(\n\t\tloc => loc[`id`] === nearestLocation[`key`]\n\t)\n\tif (!foundLocation) {\n\t\tconsole.error(`No nearest location found`)\n\t\treturn\n\t}\n\treturn foundLocation\n}\n"]},"metadata":{},"sourceType":"script"}