{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _utils = require('google-map-react/utils');\n\nvar _state = require('../state');\n\nvar _parsePlace = require('../utils/parse-place');\n\nvar _suggestionEvent = require('../utils/suggestion-event');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction initSearch(google, options, getValue) {\n  var input = document.querySelector('.storeLocatorSearchInput');\n\n  if (input) {\n    var searchBox = new google.maps.places.Autocomplete(input, options);\n    searchBox.addListener('place_changed', function () {\n      var place = searchBox.getPlace();\n\n      if (place) {\n        if (!place.geometry) {\n          console.warn('Returned place contains no geometry');\n          return;\n        }\n\n        var geometry = place.geometry;\n        var newBounds = {\n          ne: {\n            lat: geometry.viewport.getNorthEast().lat(),\n            lng: geometry.viewport.getNorthEast().lng()\n          },\n          sw: {\n            lat: geometry.viewport.getSouthWest().lat(),\n            lng: geometry.viewport.getSouthWest().lng()\n          }\n        };\n\n        _state.mapState.setState({\n          place: place,\n          newBounds: newBounds\n        });\n\n        var updatedAddress = (0, _parsePlace.addressFromPlace)(place);\n\n        if (getValue) {\n          getValue(updatedAddress);\n        }\n      }\n    });\n    (0, _suggestionEvent.enableEnterKey)(input, searchBox);\n  }\n}\n\nexports.default = function (props) {\n  if (props.google) {\n    initSearch(props.google, props.options || {}, props.getValue);\n  }\n\n  return _react2.default.createElement('input', {\n    type: 'text',\n    className: 'storeLocatorSearchInput',\n    placeholder: props.placeholder || 'Enter Your Location',\n    style: props.style || {},\n    onChange: props.onChange\n  });\n};\n\nmodule.exports = exports['default'];","map":{"version":3,"sources":["../../src/containers/Search.js"],"names":["input","document","searchBox","google","place","console","geometry","newBounds","ne","lat","lng","sw","mapState","updatedAddress","getValue","props","initSearch","onChange"],"mappings":";;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAEA,IAAA,WAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AACA,IAAA,gBAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;;;;;;;;AAEA,SAAA,UAAA,CAAA,MAAA,EAAA,OAAA,EAAA,QAAA,EAA+C;AAC9C,MAAMA,KAAAA,GAAQC,QAAAA,CAAAA,aAAAA,CAAd,0BAAcA,CAAd;;AACA,MAAA,KAAA,EAAW;AACV,QAAMC,SAAAA,GAAY,IAAIC,MAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAJ,YAAA,CAAA,KAAA,EAAlB,OAAkB,CAAlB;AAEAD,IAAAA,SAAAA,CAAAA,WAAAA,CAAAA,eAAAA,EAAuC,YAAW;AACjD,UAAME,KAAAA,GAAQF,SAAAA,CAAd,QAAcA,EAAd;;AACA,UAAA,KAAA,EAAW;AACV,YAAI,CAACE,KAAAA,CAAL,QAAA,EAAqB;AACpBC,UAAAA,OAAAA,CAAAA,IAAAA,CAAAA,qCAAAA;AACA;AACA;;AAJS,YAMFC,QANE,GAMWF,KANX,CAAA,QAAA;AAOV,YAAMG,SAAAA,GAAY;AACjBC,UAAAA,EAAAA,EAAI;AACHC,YAAAA,GAAAA,EAAKH,QAAAA,CAAAA,QAAAA,CAAAA,YAAAA,GADF,GACEA,EADF;AAEHI,YAAAA,GAAAA,EAAKJ,QAAAA,CAAAA,QAAAA,CAAAA,YAAAA,GAAAA,GAAAA;AAFF,WADa;AAKjBK,UAAAA,EAAAA,EAAI;AACHF,YAAAA,GAAAA,EAAKH,QAAAA,CAAAA,QAAAA,CAAAA,YAAAA,GADF,GACEA,EADF;AAEHI,YAAAA,GAAAA,EAAKJ,QAAAA,CAAAA,QAAAA,CAAAA,YAAAA,GAAAA,GAAAA;AAFF;AALa,SAAlB;;AAUAM,QAAAA,MAAAA,CAAAA,QAAAA,CAAAA,QAAAA,CAAkB;AAAER,UAAAA,KAAAA,EAAF,KAAA;AAASG,UAAAA,SAAAA,EAA3BK;AAAkB,SAAlBA;;AAEA,YAAMC,cAAAA,GAAiB,CAAA,GAAA,WAAA,CAAA,gBAAA,EAAvB,KAAuB,CAAvB;;AACA,YAAA,QAAA,EAAc;AACbC,UAAAA,QAAAA,CAAAA,cAAAA,CAAAA;AACA;AACD;AAzBFZ,KAAAA;AA2BA,KAAA,GAAA,gBAAA,CAAA,cAAA,EAAA,KAAA,EAAA,SAAA;AACA;AACD;;kBAEc,UAAA,KAAA,EAAS;AACvB,MAAIa,KAAAA,CAAJ,MAAA,EAAkB;AACjBC,IAAAA,UAAAA,CAAWD,KAAAA,CAAXC,MAAAA,EAAyBD,KAAAA,CAAAA,OAAAA,IAAzBC,EAAAA,EAA8CD,KAAAA,CAA9CC,QAAAA,CAAAA;AACA;;AAED,SACC,OAAA,CAAA,OAAA,CAAA,aAAA,CAAA,OAAA,EAAA;AACC,IAAA,IAAA,EADD,MAAA;AAEC,IAAA,SAAA,EAFD,yBAAA;AAGC,IAAA,WAAA,EAAaD,KAAAA,CAAAA,WAAAA,IAHd,qBAAA;AAIC,IAAA,KAAA,EAAOA,KAAAA,CAAAA,KAAAA,IAJR,EAAA;AAKC,IAAA,QAAA,EAAUA,KAAAA,CAAME;AALjB,GAAA,CADD","sourcesContent":["import React, { Component } from 'react'\nimport { fitBounds } from 'google-map-react/utils'\nimport { mapState } from '../state'\n\nimport { addressFromPlace } from '../utils/parse-place'\nimport { enableEnterKey } from '../utils/suggestion-event'\n\nfunction initSearch(google, options, getValue) {\n\tconst input = document.querySelector('.storeLocatorSearchInput')\n\tif (input) {\n\t\tconst searchBox = new google.maps.places.Autocomplete(input, options)\n\n\t\tsearchBox.addListener('place_changed', function() {\n\t\t\tconst place = searchBox.getPlace()\n\t\t\tif (place) {\n\t\t\t\tif (!place.geometry) {\n\t\t\t\t\tconsole.warn('Returned place contains no geometry')\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tconst { geometry } = place\n\t\t\t\tconst newBounds = {\n\t\t\t\t\tne: {\n\t\t\t\t\t\tlat: geometry.viewport.getNorthEast().lat(),\n\t\t\t\t\t\tlng: geometry.viewport.getNorthEast().lng()\n\t\t\t\t\t},\n\t\t\t\t\tsw: {\n\t\t\t\t\t\tlat: geometry.viewport.getSouthWest().lat(),\n\t\t\t\t\t\tlng: geometry.viewport.getSouthWest().lng()\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tmapState.setState({ place, newBounds })\n\n\t\t\t\tconst updatedAddress = addressFromPlace(place)\n\t\t\t\tif (getValue) {\n\t\t\t\t\tgetValue(updatedAddress)\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\tenableEnterKey(input, searchBox)\n\t}\n}\n\nexport default props => {\n\tif (props.google) {\n\t\tinitSearch(props.google, props.options || {}, props.getValue)\n\t}\n\n\treturn (\n\t\t<input\n\t\t\ttype=\"text\"\n\t\t\tclassName=\"storeLocatorSearchInput\"\n\t\t\tplaceholder={props.placeholder || 'Enter Your Location'}\n\t\t\tstyle={props.style || {}}\n\t\t\tonChange={props.onChange}\n\t\t/>\n\t)\n}\n"]},"metadata":{},"sourceType":"script"}