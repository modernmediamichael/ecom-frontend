{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _googleMapsReact = require('google-maps-react');\n\nvar _parsePlace = require('../utils/parse-place');\n\nvar _suggestionEvent = require('../utils/suggestion-event');\n\nvar _state = require('../state');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar AutoComplete = function (_Component) {\n  (0, _inherits3.default)(AutoComplete, _Component);\n\n  function AutoComplete(props) {\n    (0, _classCallCheck3.default)(this, AutoComplete);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (AutoComplete.__proto__ || Object.getPrototypeOf(AutoComplete)).call(this, props));\n\n    _this.state = {\n      place: null\n    };\n    _this.updateInput = _this.updateInput.bind(_this);\n    return _this;\n  }\n\n  (0, _createClass3.default)(AutoComplete, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (this.props.loaded) {\n        var _props = this.props,\n            google = _props.google,\n            customOptions = _props.customOptions; // Try using differnet types options. Or just look at search comp and copy directly\n\n        var options = (0, _extends3.default)({\n          types: ['address']\n        }, customOptions);\n        this.autocomplete = new google.maps.places.Autocomplete(this.input, options);\n        this.autocomplete.addListener('place_changed', this.updateInput);\n        (0, _suggestionEvent.enableEnterKey)(this.input, this.autocomplete);\n      }\n    }\n  }, {\n    key: 'updateInput',\n    value: function updateInput(e) {\n      if (!this.props.getValue) {\n        console.warn('Use the prop getValue to get the location back from AutoComplete.');\n      }\n\n      var place = this.autocomplete.getPlace();\n      if (place === this.state.place) place = undefined;\n\n      if (place) {\n        var updatedAddress = (0, _parsePlace.addressFromPlace)(place);\n        this.props.getValue(updatedAddress);\n\n        if (place.geometry) {\n          _state.mapState.setState({\n            place: place\n          });\n        }\n\n        if (place.formatted_address) {\n          if (this.props.getValue) {\n            this.setState({\n              place: place\n            });\n          }\n\n          return;\n        }\n\n        if (place.name) {\n          if (this.props.getValue) {\n            this.setState({\n              place: place\n            });\n          }\n        }\n      } else if (!place) {\n        if (this.props.getValue && e) {\n          this.props.getValue(e.target.value);\n\n          _state.mapState.setState({\n            searchInput: e.target.value\n          });\n        }\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var updatedInput = (0, _extends3.default)({}, this.props);\n      delete updatedInput['getValue'];\n      delete updatedInput['google'];\n      delete updatedInput['googleApiKey'];\n      delete updatedInput['loaded'];\n      delete updatedInput['customOptions'];\n      return _react2.default.createElement('input', (0, _extends3.default)({\n        'aria-label': updatedInput.placeholder || updatedInput.name,\n        type: this.props.type || 'text',\n        ref: function ref(_ref) {\n          return _this2.input = _ref;\n        },\n        className: 'storeLocatorAutocomplete',\n        onChange: this.updateInput\n      }, updatedInput));\n    }\n  }]);\n  return AutoComplete;\n}(_react.Component);\n\nexports.default = (0, _googleMapsReact.GoogleApiWrapper)(function (props) {\n  return {\n    apiKey: props.googleApiKey\n  };\n})(AutoComplete);\nmodule.exports = exports['default'];","map":{"version":3,"sources":["../../src/containers/AutoComplete.js"],"names":["AutoComplete","Component","place","google","customOptions","types","e","console","updatedAddress","mapState","searchInput","updatedInput","updateInput","apiKey","props","googleApiKey"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { GoogleApiWrapper } from 'google-maps-react'\n\nimport { addressFromPlace } from '../utils/parse-place'\nimport { enableEnterKey } from '../utils/suggestion-event'\nimport { mapState } from '../state'\n\nclass AutoComplete extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tplace: null\n\t\t}\n\n\t\tthis.updateInput = this.updateInput.bind(this)\n\t}\n\n\tcomponentDidMount() {\n\t\tif (this.props.loaded) {\n\t\t\tconst { google, customOptions } = this.props\n\t\t\t// Try using differnet types options. Or just look at search comp and copy directly\n\t\t\tconst options = {\n\t\t\t\ttypes: [`address`],\n\t\t\t\t...customOptions\n\t\t\t}\n\t\t\tthis.autocomplete = new google.maps.places.Autocomplete(\n\t\t\t\tthis.input,\n\t\t\t\toptions\n\t\t\t)\n\t\t\tthis.autocomplete.addListener('place_changed', this.updateInput)\n\t\t\tenableEnterKey(this.input, this.autocomplete)\n\t\t}\n\t}\n\n\tupdateInput(e) {\n\t\tif (!this.props.getValue) {\n\t\t\tconsole.warn(\n\t\t\t\t'Use the prop getValue to get the location back from AutoComplete.'\n\t\t\t)\n\t\t}\n\t\tlet place = this.autocomplete.getPlace()\n\t\tif (place === this.state.place) place = undefined\n\t\tif (place) {\n\t\t\tconst updatedAddress = addressFromPlace(place)\n\n\t\t\tthis.props.getValue(updatedAddress)\n\t\t\tif (place.geometry) {\n\t\t\t\tmapState.setState({ place })\n\t\t\t}\n\t\t\tif (place.formatted_address) {\n\t\t\t\tif (this.props.getValue) {\n\t\t\t\t\tthis.setState({ place })\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif (place.name) {\n\t\t\t\tif (this.props.getValue) {\n\t\t\t\t\tthis.setState({ place })\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!place) {\n\t\t\tif (this.props.getValue && e) {\n\t\t\t\tthis.props.getValue(e.target.value)\n\t\t\t\tmapState.setState({ searchInput: e.target.value })\n\t\t\t}\n\t\t}\n\t}\n\n\trender() {\n\t\tlet updatedInput = { ...this.props }\n\t\tdelete updatedInput['getValue']\n\t\tdelete updatedInput['google']\n\t\tdelete updatedInput['googleApiKey']\n\t\tdelete updatedInput['loaded']\n\t\tdelete updatedInput['customOptions']\n\n\t\treturn (\n\t\t\t<input\n\t\t\t\taria-label={updatedInput.placeholder || updatedInput.name}\n\t\t\t\ttype={this.props.type || 'text'}\n\t\t\t\tref={ref => (this.input = ref)}\n\t\t\t\tclassName=\"storeLocatorAutocomplete\"\n\t\t\t\tonChange={this.updateInput}\n\t\t\t\t{...updatedInput}\n\t\t\t/>\n\t\t)\n\t}\n}\n\nexport default GoogleApiWrapper(props => ({\n\tapiKey: props.googleApiKey\n}))(AutoComplete)\n"]},"metadata":{},"sourceType":"script"}