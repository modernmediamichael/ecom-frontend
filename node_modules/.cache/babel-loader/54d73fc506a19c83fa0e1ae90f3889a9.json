{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createClusters = undefined;\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _supercluster = require('supercluster');\n\nvar _supercluster2 = _interopRequireDefault(_supercluster);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar createClusters = function createClusters(mapProps, markers, radius, extent, nodeSize, minZoom, maxZoom) {\n  var bounds = mapProps.bounds,\n      zoom = mapProps.zoom;\n  var index = new _supercluster2.default({\n    radius: radius || 40,\n    extent: extent || 512,\n    nodeSize: nodeSize || 64,\n    minZoom: minZoom || 0,\n    maxZoom: maxZoom || 16 // log: true,\n\n  });\n  var points = markers.map(function (marker) {\n    return (0, _extends3.default)({}, marker, {\n      geometry: {\n        coordinates: [marker.lng, marker.lat]\n      }\n    });\n  }); // console.log(`POINTS: `, JSON.stringify(points, null , 2))\n  // console.log(`BOUNDS: `, JSON.stringify(bounds, null, 2))\n  // console.log(`ZOOM: `, zoom)\n\n  var clusters = index.load(points).getClusters([bounds.sw.lng, bounds.sw.lat, bounds.ne.lng, bounds.ne.lat], zoom).map(function (cluster) {\n    return cluster.type === 'Feature' ? {\n      id: cluster.id,\n      lat: cluster.geometry.coordinates[1],\n      lng: cluster.geometry.coordinates[0],\n      point_count: cluster.properties.point_count,\n      cluster_id: cluster.properties.cluster_id,\n      // onclick to get correct zoom\n      getZoom: function getZoom() {\n        return index.getClusterExpansionZoom(cluster.properties.cluster_id);\n      }\n    } : cluster;\n  });\n\n  if (!clusters.length) {\n    return markers;\n  } else {\n    return clusters;\n  }\n};\n\nexports.createClusters = createClusters;","map":{"version":3,"sources":["../../src/utils/clustering.js"],"names":["createClusters","bounds","zoom","mapProps","index","supercluster","radius","extent","nodeSize","minZoom","maxZoom","points","geometry","coordinates","marker","clusters","id","cluster","lat","lng","point_count","cluster_id","getZoom"],"mappings":";;;;;;;;;;;AAAA,IAAA,aAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;;;;;;;;;AAEA,IAAMA,cAAAA,GAAiB,SAAjBA,cAAiB,CAAA,QAAA,EAAA,OAAA,EAAA,MAAA,EAAA,MAAA,EAAA,QAAA,EAAA,OAAA,EAAA,OAAA,EAQlB;AAAA,MACIC,MADJ,GACqBE,QADrB,CAAA,MAAA;AAAA,MACYD,IADZ,GACqBC,QADrB,CAAA,IAAA;AAEJ,MAAMC,KAAAA,GAAQ,IAAIC,cAAAA,CAAJ,OAAA,CAAiB;AAC9BC,IAAAA,MAAAA,EAAQA,MAAAA,IADsB,EAAA;AAE9BC,IAAAA,MAAAA,EAAQA,MAAAA,IAFsB,GAAA;AAG9BC,IAAAA,QAAAA,EAAUA,QAAAA,IAHoB,EAAA;AAI9BC,IAAAA,OAAAA,EAASA,OAAAA,IAJqB,CAAA;AAK9BC,IAAAA,OAAAA,EAASA,OAAAA,IAAW,EALU,CAM9B;;AAN8B,GAAjB,CAAd;AAQA,MAAMC,MAAAA,GAAS,OAAA,CAAA,GAAA,CAAY,UAAA,MAAA,EAAU;AACpC,WAAA,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA,EAAA,EAAA,MAAA,EAAA;AAECC,MAAAA,QAAAA,EAAU;AAAEC,QAAAA,WAAAA,EAAa,CAACC,MAAAA,CAAD,GAAA,EAAaA,MAAAA,CAA5B,GAAe;AAAf;AAFX,KAAA,CAAA;AADD,GAAe,CAAf,CAVI,CAgBJ;AACA;AACA;;AACA,MAAMC,QAAAA,GAAW,KAAA,CAAA,IAAA,CAAA,MAAA,EAAA,WAAA,CAGf,CAACd,MAAAA,CAAAA,EAAAA,CAAD,GAAA,EAAgBA,MAAAA,CAAAA,EAAAA,CAAhB,GAAA,EAA+BA,MAAAA,CAAAA,EAAAA,CAA/B,GAAA,EAA8CA,MAAAA,CAAAA,EAAAA,CAH/B,GAGf,CAHe,EAAA,IAAA,EAAA,GAAA,CAMX,UAAA,OAAA,EAAA;AAAA,WACJ,OAAA,CAAA,IAAA,KAAA,SAAA,GACG;AACAe,MAAAA,EAAAA,EAAIC,OAAAA,CADJ,EAAA;AAEAC,MAAAA,GAAAA,EAAKD,OAAAA,CAAAA,QAAAA,CAAAA,WAAAA,CAFL,CAEKA,CAFL;AAGAE,MAAAA,GAAAA,EAAKF,OAAAA,CAAAA,QAAAA,CAAAA,WAAAA,CAHL,CAGKA,CAHL;AAIAG,MAAAA,WAAAA,EAAaH,OAAAA,CAAAA,UAAAA,CAJb,WAAA;AAKAI,MAAAA,UAAAA,EAAYJ,OAAAA,CAAAA,UAAAA,CALZ,UAAA;AAMA;AACAK,MAAAA,OAAAA,EAAS,SAAA,OAAA,GAAA;AAAA,eACRlB,KAAAA,CAAAA,uBAAAA,CAA8Ba,OAAAA,CAAAA,UAAAA,CADtB,UACRb,CADQ;AAAA;AAPT,KADH,GADI,OAAA;AANN,GAAiB,CAAjB;;AAqBA,MAAG,CAACW,QAAAA,CAAJ,MAAA,EAAqB;AACpB,WAAA,OAAA;AADD,GAAA,MAEO;AACN,WAAA,QAAA;AACA;AApDF,CAAA;;QAuDSf,c,GAAAA,c","sourcesContent":["import supercluster from 'supercluster'\n\nconst createClusters = (\n\tmapProps,\n\tmarkers,\n\tradius,\n\textent,\n\tnodeSize,\n\tminZoom,\n\tmaxZoom\n) => {\n\tconst { bounds, zoom } = mapProps\n\tconst index = new supercluster({\n\t\tradius: radius || 40,\n\t\textent: extent || 512,\n\t\tnodeSize: nodeSize || 64,\n\t\tminZoom: minZoom || 0,\n\t\tmaxZoom: maxZoom || 16,\n\t\t// log: true,\n\t})\n\tconst points = markers.map(marker => {\n\t\treturn {\n\t\t\t...marker,\n\t\t\tgeometry: { coordinates: [marker.lng, marker.lat] }\n\t\t}\n\t})\n\t// console.log(`POINTS: `, JSON.stringify(points, null , 2))\n\t// console.log(`BOUNDS: `, JSON.stringify(bounds, null, 2))\n\t// console.log(`ZOOM: `, zoom)\n\tconst clusters = index\n\t\t.load(points)\n\t\t.getClusters(\n\t\t\t[bounds.sw.lng, bounds.sw.lat, bounds.ne.lng, bounds.ne.lat],\n\t\t\tzoom\n\t\t)\n\t\t.map(cluster =>\n\t\t\tcluster.type === 'Feature'\n\t\t\t\t? {\n\t\t\t\t\t\tid: cluster.id,\n\t\t\t\t\t\tlat: cluster.geometry.coordinates[1],\n\t\t\t\t\t\tlng: cluster.geometry.coordinates[0],\n\t\t\t\t\t\tpoint_count: cluster.properties.point_count,\n\t\t\t\t\t\tcluster_id: cluster.properties.cluster_id,\n\t\t\t\t\t\t// onclick to get correct zoom\n\t\t\t\t\t\tgetZoom: () =>\n\t\t\t\t\t\t\tindex.getClusterExpansionZoom(cluster.properties.cluster_id)\n\t\t\t\t  }\n\t\t\t\t: cluster\n\t\t)\n\n\tif(!clusters.length) {\n\t\treturn markers\n\t} else {\n\t\treturn clusters\n\t}\n}\n\nexport { createClusters }\n"]},"metadata":{},"sourceType":"script"}