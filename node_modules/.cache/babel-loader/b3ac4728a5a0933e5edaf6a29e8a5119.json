{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _googleMapReact = require('google-map-react');\n\nvar _googleMapReact2 = _interopRequireDefault(_googleMapReact);\n\nvar _utils = require('google-map-react/utils');\n\nvar _geolib = require('geolib');\n\nvar _geolib2 = _interopRequireDefault(_geolib);\n\nvar _reactLoadScript = require('react-load-script');\n\nvar _reactLoadScript2 = _interopRequireDefault(_reactLoadScript);\n\nvar _Pin = require('./Pin');\n\nvar _Pin2 = _interopRequireDefault(_Pin);\n\nvar _ClusterPin = require('./ClusterPin');\n\nvar _ClusterPin2 = _interopRequireDefault(_ClusterPin);\n\nvar _Info = require('./Info');\n\nvar _Info2 = _interopRequireDefault(_Info);\n\nvar _InfoStyle = require('./InfoStyle');\n\nvar _InfoStyle2 = _interopRequireDefault(_InfoStyle);\n\nvar _SearchStyle = require('./SearchStyle');\n\nvar _SearchStyle2 = _interopRequireDefault(_SearchStyle);\n\nvar _clustering = require('../utils/clustering');\n\nvar _string = require('../utils/string');\n\nvar _parsePlace = require('../utils/parse-place');\n\nvar _suggestionEvent = require('../utils/suggestion-event');\n\nvar _state2 = require('../state');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // import { objectsAreEqual } from '../utils/objects'\n\n\nvar Map = function (_Component) {\n  (0, _inherits3.default)(Map, _Component);\n\n  function Map(props) {\n    (0, _classCallCheck3.default)(this, Map);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (Map.__proto__ || Object.getPrototypeOf(Map)).call(this, props));\n\n    _this.createMapOptions = _this.createMapOptions.bind(_this);\n    _this.onMapChanged = _this.onMapChanged.bind(_this);\n    _this.toggleLocation = _this.toggleLocation.bind(_this);\n    _this.closeLocation = _this.closeLocation.bind(_this);\n    _this.onPlaceChanged = _this.onPlaceChanged.bind(_this);\n    _this.handleGoogleMapApiLoad = _this.handleGoogleMapApiLoad.bind(_this);\n    _this.onClusterClick = _this.onClusterClick.bind(_this);\n    _this.onMapStateChange = _this.onMapStateChange.bind(_this);\n    _this.searchByQuery = _this.searchByQuery.bind(_this);\n    _this.state = {\n      updatedLocations: _this.props.locations,\n      center: {\n        lat: 0,\n        lng: 0\n      },\n      zoom: 6,\n      place: null,\n      mapLoaded: false,\n      props: null,\n      newBounds: null,\n      searchInput: ''\n    };\n    return _this;\n  }\n\n  (0, _createClass3.default)(Map, [{\n    key: 'onClusterClick',\n    value: function onClusterClick(_ref) {\n      var zoom = _ref.zoom,\n          center = _ref.center;\n\n      if (zoom && center) {\n        this.setState({\n          zoom: zoom,\n          center: center\n        });\n      } else if (!zoom || !center) {\n        console.warn('Must include zoom: ' + zoom + ' and center: ' + JSON.stringify(center) + ' to update map properly. Try using the updateMap function passed through this.props.\\n\\t\\t\\t\\tExample:\\n\\t\\t\\t\\tonClick={() => {\\n\\t\\t\\t\\t\\tupdateMap({\\n\\t\\t\\t\\t\\t\\tzoom: this.props.getZoom(this.props.cluster_id)\\n\\t\\t\\t\\t\\t\\tcenter: { lat: this.props.lat, lng: this.props.lng }\\n\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t}}\\n\\t\\t\\t\\t');\n      }\n    } // update visible locations on map change\n\n  }, {\n    key: 'onMapChanged',\n    value: function onMapChanged(props) {\n      if (!props || !this.state.mapLoaded) return;\n\n      if (this.props.logs) {\n        console.log('MAP CHANGE PROPS: ', props);\n      }\n\n      var bounds = {\n        ne: {\n          lat: props.bounds.ne.lat > 90 ? props.bounds.ne.lat - 180 : props.bounds.ne.lat,\n          lng: props.bounds.ne.lng > 180 ? props.bounds.ne.lng - 360 : props.bounds.ne.lng\n        },\n        sw: {\n          lat: props.bounds.sw.lat > 90 ? props.bounds.sw.lat - 180 : props.bounds.sw.lat,\n          lng: props.bounds.sw.lng > 180 ? props.bounds.sw.lng - 360 : props.bounds.sw.lng\n        }\n      };\n      var center = {\n        lat: props.center.lat > 90 ? props.center.lat - 180 : props.center.lat,\n        lng: props.center.lng > 180 ? props.center.lng - 360 : props.center.lng\n      };\n      var ne = bounds.ne,\n          sw = bounds.sw;\n      var locations = this.props.locations; // locations within the map bounds\n\n      var foundLocations = locations.filter(function (location) {\n        var lat = (0, _string.strToFixed)(location.lat, 6);\n        var lng = (0, _string.strToFixed)(location.lng, 6);\n        return lat >= (0, _string.strToFixed)(sw.lat, 6) && lat <= (0, _string.strToFixed)(ne.lat, 6) && lng >= (0, _string.strToFixed)(sw.lng, 6) && lng <= (0, _string.strToFixed)(ne.lng, 6);\n      }).map(function (location) {\n        // find the distance from the center for each location\n        var distanceMeters = _geolib2.default.getDistance(center, {\n          lat: location.lat,\n          lng: location.lng\n        });\n\n        var distanceMiles = (distanceMeters * 0.000621371).toFixed(2);\n        return (0, _extends3.default)({}, location, {\n          distanceFromCenter: distanceMiles\n        });\n      }); // console.log(`FOUND LOCATIONS`, foundLocations)\n      // if enableClusters is enabled create clusters and set them to the state\n\n      if (this.props.enableClusters) {\n        var cluster = this.props.cluster;\n        var clusters = (0, _clustering.createClusters)(props, foundLocations.length > 0 ? foundLocations : locations, cluster && cluster.radius, cluster && cluster.extent, cluster && cluster.nodeSize, cluster && cluster.minZoom, cluster && cluster.maxZoom); // console.log(`CLUSTERS: `, clusters)\n\n        this.setState({\n          updatedLocations: clusters\n        });\n      } else {\n        this.setState({\n          updatedLocations: foundLocations\n        });\n      }\n\n      if (this.props.onChange) {\n        if (foundLocations) {\n          if (this.props.logs) {\n            console.log('SENDING BACK FOUND LOCATIONS');\n            console.log('First Location: ', foundLocations[0]);\n          }\n\n          this.props.onChange(foundLocations);\n        }\n      }\n    }\n  }, {\n    key: 'toggleLocation',\n    value: function toggleLocation(id) {\n      var locations = this.state.updatedLocations.map(function (location) {\n        return (0, _extends3.default)({}, location, {\n          show: location.id === id ? !location.show : false\n        });\n      });\n      this.setState({\n        updatedLocations: locations\n      });\n    }\n  }, {\n    key: 'closeLocation',\n    value: function closeLocation(id) {\n      var locations = this.state.updatedLocations.map(function (location) {\n        return (0, _extends3.default)({}, location, {\n          show: false\n        });\n      });\n      this.setState({\n        updatedLocations: locations\n      });\n    }\n  }, {\n    key: 'createMapOptions',\n    value: function createMapOptions() {\n      var mapStyle = this.props.mapStyle;\n      var styles = this.props.mapOptions.styles;\n      return (0, _extends3.default)({\n        styles: styles || mapStyle\n      }, this.props.mapOptions);\n    }\n  }, {\n    key: 'moveMap',\n    value: function moveMap(place) {\n      this.setState({\n        place: place\n      });\n\n      var _getPlaceViewport = this.getPlaceViewport(place),\n          center = _getPlaceViewport.center,\n          zoom = _getPlaceViewport.zoom;\n\n      this.setState({\n        center: center,\n        zoom: zoom.toString().length > 1 ? 9 : zoom\n      });\n    }\n  }, {\n    key: 'onPlaceChanged',\n    value: function onPlaceChanged(e) {\n      if (e) {\n        if (e.target.value) {\n          this.setState({\n            searchInput: e.target.value\n          });\n        }\n      }\n\n      var place = this.searchBox.getPlace();\n\n      if (place && place !== this.state.place) {\n        if (this.props.submitSearch) {\n          this.props.submitSearch(place);\n        }\n\n        this.moveMap(place);\n        var updatedAddress = (0, _parsePlace.addressFromPlace)(place);\n\n        if (this.props.getValue) {\n          this.props.getValue(updatedAddress);\n        }\n      }\n    }\n  }, {\n    key: 'viewPortWithBounds',\n    value: function viewPortWithBounds(bounds) {\n      var newBounds = {\n        ne: {\n          lat: bounds.getNorthEast().lat(),\n          lng: bounds.getNorthEast().lng()\n        },\n        sw: {\n          lat: bounds.getSouthWest().lat(),\n          lng: bounds.getSouthWest().lng()\n        }\n      };\n      var size = {};\n\n      if (this.mapEl) {\n        size = {\n          width: this.mapEl.offsetWidth,\n          height: this.mapEl.offsetHeight\n        };\n      }\n\n      this.setState({\n        newBounds: (0, _utils.fitBounds)(newBounds, size).newBounds\n      });\n      return (0, _utils.fitBounds)(newBounds, size);\n    }\n  }, {\n    key: 'getPlaceViewport',\n    value: function getPlaceViewport(place) {\n      var geometry = place.geometry;\n      return this.viewPortWithBounds(geometry.viewport);\n    }\n  }, {\n    key: 'getLocationsViewport',\n    value: function getLocationsViewport() {\n      var center = void 0,\n          zoom = void 0;\n\n      if (this.props.locations.length === 1) {\n        center = {\n          lat: parseFloat(this.props.locations[0].lat),\n          lng: parseFloat(this.props.locations[0].lng)\n        };\n      } else {\n        var bounds = new google.maps.LatLngBounds();\n        this.props.locations.map(function (location) {\n          bounds.extend(new google.maps.LatLng(parseFloat(location.lat), parseFloat(location.lng)));\n        });\n        var viewport = this.viewPortWithBounds(bounds);\n        center = viewport.center;\n        zoom = viewport.zoom;\n      }\n\n      return {\n        center: center || this.props.defaultCenter,\n        zoom: zoom || this.props.defaultZoom\n      };\n    }\n  }, {\n    key: 'getCurrentArea',\n    value: function getCurrentArea() {\n      var bounds = new google.maps.LatLngBounds();\n      this.props.locations.map(function (location) {\n        bounds.extend(new google.maps.LatLng(parseFloat(location.lat), parseFloat(location.lng)));\n      });\n      var center = void 0;\n\n      if (this.props.locations.length === 1) {\n        center = {\n          lat: parseFloat(this.props.locations[0].lat),\n          lng: parseFloat(this.props.locations[0].lng)\n        };\n      } else {\n        center = {\n          lat: bounds.getCenter().lat(),\n          lng: bounds.getCenter().lng()\n        };\n      }\n\n      var size = {\n        width: this.mapEl.offsetWidth,\n        height: this.mapEl.offsetHeight\n      };\n      var newBounds = {\n        ne: {\n          lat: bounds.getNorthEast().lat(),\n          lng: bounds.getNorthEast().lng()\n        },\n        nw: {\n          lat: bounds.getNorthEast().lat(),\n          lng: bounds.getSouthWest().lng()\n        },\n        se: {\n          lat: bounds.getSouthWest().lat(),\n          lng: bounds.getNorthEast().lng()\n        },\n        sw: {\n          lat: bounds.getSouthWest().lat(),\n          lng: bounds.getSouthWest().lng()\n        }\n      };\n      return {\n        center: center,\n        zoom: this.googleMapRef.props.zoom,\n        size: size,\n        bounds: newBounds\n      };\n    }\n  }, {\n    key: 'onMapStateChange',\n    value: function onMapStateChange(state) {\n      var newBounds = state.newBounds,\n          place = state.place;\n\n      if (place) {\n        this.setState({\n          place: place\n        });\n      }\n\n      if (newBounds) {\n        this.setState({\n          newBounds: newBounds\n        });\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      google.maps.event.clearInstanceListeners(this.searchBox);\n\n      _state2.mapState.unsubscribe(this.onMapStateChange);\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      _state2.mapState.subscribe(this.onMapStateChange);\n\n      var _props = this.props,\n          google = _props.google,\n          options = _props.options;\n      var input = this.searchInput;\n\n      if (this.props.initSearch) {\n        input.value = this.props.initSearch;\n      }\n\n      if (input) {\n        this.searchBox = new google.maps.places.Autocomplete(input, options);\n        this.searchBox.addListener('place_changed', this.onPlaceChanged);\n        (0, _suggestionEvent.enableEnterKey)(input, this.searchBox);\n      } // set default map location\n\n\n      var initialCenter = void 0,\n          initialZoom = void 0; // if initial location set by initSearch (D), location will be changed in handleGoogleMapApiLoad\n\n      if (!this.props.initSearch) {\n        // A. if initial location set by place => center map on it\n        if (this.props.place) {\n          var _getPlaceViewport2 = this.getPlaceViewport(this.props.place),\n              center = _getPlaceViewport2.center,\n              zoom = _getPlaceViewport2.zoom;\n\n          initialCenter = center;\n          initialZoom = zoom;\n        } // B. if initial location not set => center map on location(s) if any\n        else if (this.props.locations && this.props.locations.length > 0) {\n            var _getLocationsViewport = this.getLocationsViewport(),\n                _center = _getLocationsViewport.center,\n                _zoom = _getLocationsViewport.zoom;\n\n            initialCenter = this.props.initialCenter || _center;\n            initialZoom = this.props.initialZoom || _zoom;\n          } // if initial location set by initialCenter and initialZoom\n          else {\n              initialCenter = this.props.initialCenter || this.props.defaultZoom;\n              initialZoom = this.props.initialZoom || this.props.defaultCenter;\n            }\n\n        this.setState({\n          zoom: initialZoom,\n          center: initialCenter\n        });\n      }\n\n      this.setState({\n        mapLoaded: true\n      });\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _props2 = this.props,\n          initSearch = _props2.initSearch,\n          place = _props2.place;\n\n      if (place && prevProps.place !== place && place !== this.state.place) {\n        this.moveMap(place);\n      }\n\n      if (this.state.place && this.state.place !== prevState.place) {\n        this.moveMap(this.state.place);\n      }\n\n      if (initSearch && prevProps.initSearch !== initSearch) {\n        this.searchByQuery(initSearch);\n      }\n    }\n  }, {\n    key: 'searchByQuery',\n    value: function searchByQuery(query) {\n      var _this2 = this;\n\n      var service = new google.maps.places.PlacesService(this.map);\n      service.findPlaceFromQuery({\n        query: query,\n        fields: ['photos', 'formatted_address', 'name', 'rating', 'opening_hours', 'geometry']\n      }, function (results, status) {\n        var result = results ? results[0] : null; // no or invalid result from google PlacesService => center map on defaultCenter or locations\n\n        if (!result || results.length < 1) {\n          console.warn('No locations with given query');\n          var locationsViewport = void 0; // center map on locations if any\n\n          if (_this2.props.locations && _this2.props.locations.length > 0) {\n            locationsViewport = _this2.getLocationsViewport();\n          }\n\n          _this2.setState({\n            center: locationsViewport.center || _this2.props.defaultCenter,\n            zoom: locationsViewport.zoom || _this2.props.defaultZoom,\n            mapLoaded: true\n          });\n        } // correct result from google PlacesService => set map location to it\n        else if (status === google.maps.places.PlacesServiceStatus.OK) {\n            var _getPlaceViewport3 = _this2.getPlaceViewport(result),\n                center = _getPlaceViewport3.center,\n                zoom = _getPlaceViewport3.zoom;\n\n            _this2.setState({\n              center: center,\n              zoom: zoom.toString().length > 1 ? 9 : zoom,\n              // limit zoom to 9\n              mapLoaded: true\n            });\n          }\n      });\n    }\n  }, {\n    key: 'handleGoogleMapApiLoad',\n    value: function handleGoogleMapApiLoad(_ref2) {\n      var map = _ref2.map;\n      this.map = map; // D. if initial location set by initSearch => get location from it and center on it\n\n      if (!_state2.mapState.state.place) {\n        if (this.props.initSearch) {\n          this.searchByQuery(this.props.initSearch);\n        }\n      }\n\n      if (this.props.mapLoaded) {\n        this.props.mapLoaded();\n      }\n\n      this.setState({\n        mapLoaded: true\n      }); // if initial location was set before map was loaded in componentDidMount (case A, B or C), \n      // callback onMapChanged with correct view data to update visible locations\n      // this is not needed for case D because onMapChanged is automatically called when map is loaded\n\n      if (!this.props.initSearch) {// \tif (this.props.locations && this.props.locations.length > 0) {\n        // \t\tconst { center, zoom, size, bounds } = this.getCurrentArea()\n        // \t\tthis.onMapChanged({ \n        // \t\t\tcenter: this.props.initialCenter || center, \n        // \t\t\tzoom: this.props.initialZoom || zoom, \n        // \t\t\tsize, \n        // \t\t\tbounds \n        // \t\t})\n        // }\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      var logs = this.props.logs;\n      var Pin = this.props.pin.component || this.props.pin;\n      var ClusterPin = this.props.cluster ? this.props.cluster.component : this.props.clusterPin ? this.props.clusterPin.component : this.props.defaultClusterPin;\n      var _state = this.state,\n          updatedLocations = _state.updatedLocations,\n          zoom = _state.zoom,\n          center = _state.center;\n\n      if (logs) {\n        console.log('ZOOM: ', zoom);\n        console.log('Center: ', center);\n      }\n\n      return _react2.default.createElement('div', {\n        style: {\n          height: this.props.height,\n          width: this.props.width,\n          position: 'relative'\n        },\n        ref: function ref(mapEl) {\n          return _this3.mapEl = mapEl;\n        }\n      }, _react2.default.createElement('div', {\n        style: {\n          position: 'absolute',\n          top: 5,\n          left: 5,\n          zIndex: 2\n        }\n      }, _react2.default.createElement('input', {\n        className: 'storeLocatorInput',\n        style: _SearchStyle2.default.searchInput,\n        onChange: this.onPlaceChanged,\n        ref: function ref(input) {\n          return _this3.searchInput = input;\n        },\n        type: 'text',\n        placeholder: 'Enter Your Location...',\n        'aria-label': 'search'\n      })), this.props.enableClusters && _react2.default.createElement(_reactLoadScript2.default, {\n        url: 'https://unpkg.com/kdbush@3.0.0/kdbush.min.js'\n      }), _react2.default.createElement(_googleMapReact2.default, {\n        ref: function ref(_ref3) {\n          return _this3.googleMapRef = _ref3;\n        },\n        onGoogleApiLoaded: this.handleGoogleMapApiLoad,\n        bootstrapURLKeys: {\n          key: this.props.googleApiKey,\n          region: this.props.region || 'us'\n        },\n        yesIWantToUseGoogleMapApiInternals: true,\n        onTilesLoaded: this.props.tilesRendered,\n        center: this.props.center || center,\n        zoom: this.props.zoom || zoom,\n        options: this.createMapOptions,\n        onChange: this.onMapChanged,\n        gestureHandling: this.props.gestureHandling || 'cooperative'\n      }, updatedLocations.map(function (location, i) {\n        if (location.cluster_id) {\n          return _react2.default.createElement(ClusterPin, (0, _extends3.default)({\n            key: location.id + '-' + i,\n            lat: location.lat,\n            lng: location.lng,\n            updateMap: function updateMap(updates) {\n              return _this3.onClusterClick(updates);\n            }\n          }, location, {\n            pinProps: _this3.props.cluster ? _this3.props.cluster.pinProps : null\n          }));\n        }\n\n        return _react2.default.createElement(Pin, (0, _extends3.default)({\n          key: location.id,\n          handleLocationClick: _this3.toggleLocation,\n          lat: location.lat,\n          lng: location.lng\n        }, location, _this3.props, {\n          pinProps: _this3.props.pin.pinProps || null\n        }), !_this3.props.children ? _react2.default.createElement(_Info2.default, {\n          show: location.show,\n          style: _this3.props.infoStyle\n        }, _react2.default.createElement('div', {\n          style: _InfoStyle2.default.main\n        }, Object.keys(location).map(function (k, i) {\n          if (k === 'id' || k === 'lat' || k === 'lng' || k === 'show') return null;\n          return _react2.default.createElement('div', {\n            key: k,\n            style: k === 'name' ? {\n              marginBottom: '12px'\n            } : {\n              marginBottom: '2px'\n            }\n          }, '' + location[k]);\n        }), _react2.default.createElement('div', {\n          style: _InfoStyle2.default.close,\n          onClick: function onClick() {\n            return _this3.closeLocation(location.id);\n          }\n        }, '\\xD7'))) : _this3.props.children(location, _this3.closeLocation));\n      })));\n    }\n  }]);\n  return Map;\n}(_react.Component);\n/*global google*/\n\n\nexports.default = Map;\nMap.defaultProps = {\n  pin: _Pin2.default,\n  defaultClusterPin: _ClusterPin2.default,\n  mapStyle: {},\n  height: '800px',\n  width: '100%',\n  defaultCenter: {\n    lat: 0,\n    lng: 180\n  },\n  defaultZoom: 8\n};\nmodule.exports = exports['default'];","map":{"version":3,"sources":["../../src/containers/Map.js"],"names":["Map","Component","updatedLocations","center","lat","lng","zoom","place","mapLoaded","props","newBounds","searchInput","console","JSON","bounds","ne","sw","locations","foundLocations","location","distanceMeters","distanceMiles","distanceFromCenter","cluster","clusters","id","show","mapStyle","styles","e","value","updatedAddress","size","width","height","offsetHeight","geometry","parseFloat","google","viewport","defaultZoom","nw","se","state","mapState","options","input","initialCenter","initialZoom","prevProps","prevState","initSearch","query","service","fields","result","results","locationsViewport","status","map","logs","Pin","ClusterPin","position","top","left","zIndex","searchStyle","key","region","infoStyle","Object","k","marginBottom","pin","defaultClusterPin","defaultCenter"],"mappings":"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","sourcesContent":["/*global google*/\nimport React, { Component } from 'react'\nimport GoogleMap from 'google-map-react'\nimport { fitBounds } from 'google-map-react/utils'\nimport geolib from 'geolib'\nimport Script from 'react-load-script'\n\nimport Pin from './Pin'\nimport ClusterPin from './ClusterPin'\nimport Info from './Info'\nimport infoStyle from './InfoStyle'\nimport searchStyle from './SearchStyle'\nimport { createClusters } from '../utils/clustering'\n// import { objectsAreEqual } from '../utils/objects'\nimport { strToFixed } from '../utils/string'\nimport { addressFromPlace } from '../utils/parse-place'\nimport { enableEnterKey } from '../utils/suggestion-event'\nimport { mapState } from '../state'\n\nexport default class Map extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t\tthis.createMapOptions = this.createMapOptions.bind(this)\n\t\tthis.onMapChanged = this.onMapChanged.bind(this)\n\t\tthis.toggleLocation = this.toggleLocation.bind(this)\n\t\tthis.closeLocation = this.closeLocation.bind(this)\n\t\tthis.onPlaceChanged = this.onPlaceChanged.bind(this)\n\t\tthis.handleGoogleMapApiLoad = this.handleGoogleMapApiLoad.bind(this)\n\t\tthis.onClusterClick = this.onClusterClick.bind(this)\n\t\tthis.onMapStateChange = this.onMapStateChange.bind(this)\n\t\tthis.searchByQuery = this.searchByQuery.bind(this)\n\n\t\tthis.state = {\n\t\t\tupdatedLocations: this.props.locations,\n\t\t\tcenter: { lat: 0, lng: 0 },\n\t\t\tzoom: 6,\n\t\t\tplace: null,\n\t\t\tmapLoaded: false,\n\t\t\tprops: null,\n\t\t\tnewBounds: null,\n\t\t\tsearchInput: ``\n\t\t}\n\t}\n\n\tonClusterClick({ zoom, center }) {\n\t\tif (zoom && center) {\n\t\t\tthis.setState({ zoom, center })\n\t\t} else if (!zoom || !center) {\n\t\t\tconsole.warn(\n\t\t\t\t`Must include zoom: ${zoom} and center: ${JSON.stringify(\n\t\t\t\t\tcenter\n\t\t\t\t)} to update map properly. Try using the updateMap function passed through this.props.\n\t\t\t\tExample:\n\t\t\t\tonClick={() => {\n\t\t\t\t\tupdateMap({\n\t\t\t\t\t\tzoom: this.props.getZoom(this.props.cluster_id)\n\t\t\t\t\t\tcenter: { lat: this.props.lat, lng: this.props.lng }\n\t\t\t\t\t})\n\t\t\t\t}}\n\t\t\t\t`\n\t\t\t)\n\t\t}\n\t}\n\n\t// update visible locations on map change\n\tonMapChanged(props) {\n\t\tif (!props || !this.state.mapLoaded) return\n\t\tif(this.props.logs) { \n\t\t\tconsole.log(`MAP CHANGE PROPS: `, props)\n\t\t}\n\n\t\tconst bounds = {\n\t\t\tne: {\n\t\t\t\tlat:\n\t\t\t\t\tprops.bounds.ne.lat > 90\n\t\t\t\t\t\t? props.bounds.ne.lat - 180\n\t\t\t\t\t\t: props.bounds.ne.lat,\n\t\t\t\tlng:\n\t\t\t\t\tprops.bounds.ne.lng > 180\n\t\t\t\t\t\t? props.bounds.ne.lng - 360\n\t\t\t\t\t\t: props.bounds.ne.lng\n\t\t\t},\n\t\t\tsw: {\n\t\t\t\tlat:\n\t\t\t\t\tprops.bounds.sw.lat > 90\n\t\t\t\t\t\t? props.bounds.sw.lat - 180\n\t\t\t\t\t\t: props.bounds.sw.lat,\n\t\t\t\tlng:\n\t\t\t\t\tprops.bounds.sw.lng > 180\n\t\t\t\t\t\t? props.bounds.sw.lng - 360\n\t\t\t\t\t\t: props.bounds.sw.lng\n\t\t\t}\n\t\t}\n\t\tconst center = {\n\t\t\tlat: props.center.lat > 90 ? props.center.lat - 180 : props.center.lat,\n\t\t\tlng: props.center.lng > 180 ? props.center.lng - 360 : props.center.lng\n\t\t}\n\n\t\tconst { ne, sw } = bounds\n\t\tconst { locations } = this.props\n\t\t// locations within the map bounds\n\n\t\tconst foundLocations = locations\n\t\t\t.filter(location => {\n\t\t\t\tconst lat = strToFixed(location.lat, 6)\n\t\t\t\tconst lng = strToFixed(location.lng, 6)\n\t\t\t\treturn lat >= strToFixed(sw.lat, 6) &&\n\t\t\t\t\tlat <= strToFixed(ne.lat, 6) &&\n\t\t\t\t\tlng >= strToFixed(sw.lng, 6) &&\n\t\t\t\t\tlng <= strToFixed(ne.lng, 6)\n\t\t\t})\n\t\t\t.map(location => {\n\t\t\t\t\t// find the distance from the center for each location\n\t\t\t\t\tconst distanceMeters = geolib.getDistance(center, {\n\t\t\t\t\t\tlat: location.lat,\n\t\t\t\t\t\tlng: location.lng\n\t\t\t\t\t})\n\t\t\t\t\tconst distanceMiles = (distanceMeters * 0.000621371).toFixed(2)\n\t\t\t\t\treturn { ...location, distanceFromCenter: distanceMiles }\n\t\t\t})\n\n\t\t// console.log(`FOUND LOCATIONS`, foundLocations)\n\t\t// if enableClusters is enabled create clusters and set them to the state\n\t\tif (this.props.enableClusters) {\n\t\t\tconst { cluster } = this.props\n\t\t\tconst clusters = createClusters(\n\t\t\t\tprops,\n\t\t\t\tfoundLocations.length > 0 ? foundLocations : locations,\n\t\t\t\tcluster && cluster.radius,\n\t\t\t\tcluster && cluster.extent,\n\t\t\t\tcluster && cluster.nodeSize,\n\t\t\t\tcluster && cluster.minZoom,\n\t\t\t\tcluster && cluster.maxZoom\n\t\t\t)\n\t\t\t// console.log(`CLUSTERS: `, clusters)\n\n\t\t\tthis.setState({\n\t\t\t\tupdatedLocations: clusters\n\t\t\t})\n\t\t} else {\n\t\t\tthis.setState({ updatedLocations: foundLocations })\n\t\t}\n\n\n\t\tif (this.props.onChange) {\n\t\t\tif (foundLocations) {\n\t\t\t\tif(this.props.logs){\n\t\t\t\t\tconsole.log(`SENDING BACK FOUND LOCATIONS`)\n\t\t\t\t\tconsole.log(`First Location: `, foundLocations[0])\n\t\t\t\t}\n\t\t\t\tthis.props.onChange(foundLocations)\n\t\t\t}\n\t\t}\n\t}\n\n\ttoggleLocation(id) {\n\t\tconst locations = this.state.updatedLocations.map(location => ({\n\t\t\t...location,\n\t\t\tshow: location.id === id ? !location.show : false\n\t\t}))\n\t\tthis.setState({ updatedLocations: locations })\n\t}\n\n\tcloseLocation(id) {\n\t\tconst locations = this.state.updatedLocations.map(location => ({\n\t\t\t...location,\n\t\t\tshow: false\n\t\t}))\n\t\tthis.setState({ updatedLocations: locations })\n\t}\n\n\tcreateMapOptions() {\n\t\tconst { mapStyle } = this.props\n\t\tconst { styles } = this.props.mapOptions\n\t\treturn {\n\t\t\tstyles: styles || mapStyle,\n\t\t\t...this.props.mapOptions\n\t\t}\n\t}\n\n\tmoveMap(place) {\n\t\tthis.setState({ place })\n\t\tconst { center, zoom } = this.getPlaceViewport(place)\n\t\tthis.setState({\n\t\t\tcenter: center,\n\t\t\tzoom: zoom.toString().length > 1 ? 9 : zoom\n\t\t})\n\t}\n\n\tonPlaceChanged(e) {\n\t\tif (e) {\n\t\t\tif (e.target.value) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tsearchInput: e.target.value\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\tlet place = this.searchBox.getPlace()\n\t\tif (place && place !== this.state.place) {\n\t\t\tif (this.props.submitSearch) {\n\t\t\t\tthis.props.submitSearch(place)\n\t\t\t}\n\t\t\tthis.moveMap(place)\n\n\t\t\tconst updatedAddress = addressFromPlace(place)\n\t\t\tif (this.props.getValue) {\n\t\t\t\tthis.props.getValue(updatedAddress)\n\t\t\t}\n\t\t}\n\t}\n\n\tviewPortWithBounds(bounds) {\n\t\tconst newBounds = {\n\t\t\tne: {\n\t\t\t\tlat: bounds.getNorthEast().lat(),\n\t\t\t\tlng: bounds.getNorthEast().lng()\n\t\t\t},\n\t\t\tsw: {\n\t\t\t\tlat: bounds.getSouthWest().lat(),\n\t\t\t\tlng: bounds.getSouthWest().lng()\n\t\t\t}\n\t\t}\n\t\tlet size = {}\n\t\tif (this.mapEl) {\n\t\t\tsize = {\n\t\t\t\twidth: this.mapEl.offsetWidth,\n\t\t\t\theight: this.mapEl.offsetHeight\n\t\t\t}\n\t\t}\n\t\tthis.setState({\n\t\t\tnewBounds: fitBounds(newBounds, size).newBounds\n\t\t})\n\t\treturn fitBounds(newBounds, size)\n\t}\n\n\tgetPlaceViewport(place) {\n\t\tconst { geometry } = place\n\t\treturn this.viewPortWithBounds(geometry.viewport)\n\t}\n\n\tgetLocationsViewport() {\n\t\tlet center, zoom\n\n\t\tif (this.props.locations.length === 1) {\n\t\t\tcenter = {\n\t\t\t\tlat: parseFloat(this.props.locations[0].lat),\n\t\t\t\tlng: parseFloat(this.props.locations[0].lng)\n\t\t\t}\n\t\t} else {\n\t\t\tconst bounds = new google.maps.LatLngBounds()\n\t\t\tthis.props.locations.map(location => {\n\t\t\t\tbounds.extend(\n\t\t\t\t\tnew google.maps.LatLng(\n\t\t\t\t\t\tparseFloat(location.lat),\n\t\t\t\t\t\tparseFloat(location.lng)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t})\n\t\t\tconst viewport = this.viewPortWithBounds(bounds)\n\t\t\tcenter = viewport.center\n\t\t\tzoom = viewport.zoom\n\t\t}\n\n\t\treturn {\n\t\t\tcenter: center || this.props.defaultCenter,\n\t\t\tzoom: zoom || this.props.defaultZoom\n\t\t}\n\t}\n\n\tgetCurrentArea() {\n\t\tconst bounds = new google.maps.LatLngBounds()\n\t\tthis.props.locations.map(location => {\n\t\t\tbounds.extend(\n\t\t\t\tnew google.maps.LatLng(\n\t\t\t\t\tparseFloat(location.lat),\n\t\t\t\t\tparseFloat(location.lng)\n\t\t\t\t)\n\t\t\t)\n\t\t})\n\n\t\tlet center\n\t\tif (this.props.locations.length === 1) {\n\t\t\tcenter = {\n\t\t\t\tlat: parseFloat(this.props.locations[0].lat),\n\t\t\t\tlng: parseFloat(this.props.locations[0].lng)\n\t\t\t}\n\t\t} else {\n\t\t\tcenter = {\n\t\t\t\tlat: bounds.getCenter().lat(),\n\t\t\t\tlng: bounds.getCenter().lng()\n\t\t\t}\n\t\t}\n\n\t\tlet size = {\n\t\t\twidth: this.mapEl.offsetWidth,\n\t\t\theight: this.mapEl.offsetHeight\n\t\t}\n\n\t\tconst newBounds = {\n\t\t\tne: {\n\t\t\t\tlat: bounds.getNorthEast().lat(),\n\t\t\t\tlng: bounds.getNorthEast().lng()\n\t\t\t},\n\t\t\tnw: {\n\t\t\t\tlat: bounds.getNorthEast().lat(),\n\t\t\t\tlng: bounds.getSouthWest().lng()\n\t\t\t},\n\t\t\tse: {\n\t\t\t\tlat: bounds.getSouthWest().lat(),\n\t\t\t\tlng: bounds.getNorthEast().lng()\n\t\t\t},\n\t\t\tsw: {\n\t\t\t\tlat: bounds.getSouthWest().lat(),\n\t\t\t\tlng: bounds.getSouthWest().lng()\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tcenter: center,\n\t\t\tzoom: this.googleMapRef.props.zoom,\n\t\t\tsize,\n\t\t\tbounds: newBounds\n\t\t}\n\t}\n\n\tonMapStateChange(state) {\n\t\tconst { newBounds, place } = state\n\t\tif (place) {\n\t\t\tthis.setState({ place })\n\t\t}\n\t\tif (newBounds) {\n\t\t\tthis.setState({ newBounds })\n\t\t}\n\t}\n\n\tcomponentWillUnmount() {\n\t\tgoogle.maps.event.clearInstanceListeners(this.searchBox)\n\t\tmapState.unsubscribe(this.onMapStateChange)\n\t}\n\n\tcomponentDidMount() {\n\t\tmapState.subscribe(this.onMapStateChange)\n\t\tconst { google, options } = this.props\n\t\tconst input = this.searchInput\n\t\tif (this.props.initSearch) {\n\t\t\tinput.value = this.props.initSearch\n\t\t}\n\t\tif (input) {\n\t\t\tthis.searchBox = new google.maps.places.Autocomplete(input, options)\n\t\t\tthis.searchBox.addListener('place_changed', this.onPlaceChanged)\n\t\t\tenableEnterKey(input, this.searchBox)\n\t\t}\n\n\t\t// set default map location\n\t\tlet initialCenter, initialZoom\n\t\t// if initial location set by initSearch (D), location will be changed in handleGoogleMapApiLoad\n\t\tif (!this.props.initSearch) {\n\t\t\t// A. if initial location set by place => center map on it\n\t\t\tif (this.props.place) {\n\t\t\t\tconst { center, zoom } = this.getPlaceViewport(this.props.place)\n\t\t\t\tinitialCenter = center\n\t\t\t\tinitialZoom = zoom\n\t\t\t}\n\t\t\t// B. if initial location not set => center map on location(s) if any\n\t\t\telse if (this.props.locations && this.props.locations.length > 0) {\n\t\t\t\tconst { center, zoom } = this.getLocationsViewport()\n\t\t\t\tinitialCenter = this.props.initialCenter || center\n\t\t\t\tinitialZoom = this.props.initialZoom || zoom\n\t\t\t} \n\n\t\t\t// if initial location set by initialCenter and initialZoom\n\t\t\telse {\n\t\t\t\tinitialCenter = this.props.initialCenter || this.props.defaultZoom\n\t\t\t\tinitialZoom = this.props.initialZoom || this.props.defaultCenter\n\t\t\t}\n\t\t\tthis.setState({\n\t\t\t\tzoom: initialZoom,\n\t\t\t\tcenter: initialCenter ,\n\t\t\t})\n\t\t}\n\t\tthis.setState({ mapLoaded: true })\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tconst { initSearch, place } = this.props\n\t\tif (place && prevProps.place !== place && place !== this.state.place) {\n\t\t\tthis.moveMap(place)\n\t\t}\n\t\tif (this.state.place && this.state.place !== prevState.place) {\n\t\t\tthis.moveMap(this.state.place)\n\t\t}\n\t\tif (initSearch && prevProps.initSearch !== initSearch) {\n\t\t\tthis.searchByQuery(initSearch)\n\t\t}\n\t}\n\n\tsearchByQuery(query) {\n\t\tconst service = new google.maps.places.PlacesService(this.map)\n\t\tservice.findPlaceFromQuery(\n\t\t\t{\n\t\t\t\tquery: query,\n\t\t\t\tfields: [\n\t\t\t\t\t'photos',\n\t\t\t\t\t'formatted_address',\n\t\t\t\t\t'name',\n\t\t\t\t\t'rating',\n\t\t\t\t\t'opening_hours',\n\t\t\t\t\t'geometry'\n\t\t\t\t]\n\t\t\t},\n\t\t\t(results, status) => {\n\t\t\t\tconst result = results ? results[0] : null\n\n\t\t\t\t// no or invalid result from google PlacesService => center map on defaultCenter or locations\n\t\t\t\tif (!result || results.length < 1) {\n\t\t\t\t\tconsole.warn('No locations with given query')\n\t\t\t\t\tlet locationsViewport\n\n\t\t\t\t\t// center map on locations if any\n\t\t\t\t\tif (this.props.locations && this.props.locations.length > 0) {\n\t\t\t\t\t\tlocationsViewport = this.getLocationsViewport()\n\t\t\t\t\t}\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tcenter: locationsViewport.center || this.props.defaultCenter,\n\t\t\t\t\t\tzoom: locationsViewport.zoom || this.props.defaultZoom,\n\t\t\t\t\t\tmapLoaded: true\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\t// correct result from google PlacesService => set map location to it\n\t\t\t\telse if (status === google.maps.places.PlacesServiceStatus.OK) {\n\t\t\t\t\tconst { center, zoom } = this.getPlaceViewport(result)\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tcenter: center,\n\t\t\t\t\t\tzoom: zoom.toString().length > 1 ? 9 : zoom, // limit zoom to 9\n\t\t\t\t\t\tmapLoaded: true\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t)\n\t}\n\n\thandleGoogleMapApiLoad({ map }) {\n\t\tthis.map = map\n\n\t\t// D. if initial location set by initSearch => get location from it and center on it\n\t\tif (!mapState.state.place) {\n\t\t\tif (this.props.initSearch) {\n\t\t\t\tthis.searchByQuery(this.props.initSearch)\n\t\t\t}\n\t\t}\n\n\t\tif (this.props.mapLoaded) {\n\t\t\tthis.props.mapLoaded()\n\t\t}\n\n\t\tthis.setState({ mapLoaded: true })\n\n\n\t\t// if initial location was set before map was loaded in componentDidMount (case A, B or C), \n\t\t// callback onMapChanged with correct view data to update visible locations\n\t\t// this is not needed for case D because onMapChanged is automatically called when map is loaded\n\t\tif (!this.props.initSearch) {\n\t\t\t// \tif (this.props.locations && this.props.locations.length > 0) {\n\t\t\t// \t\tconst { center, zoom, size, bounds } = this.getCurrentArea()\n\t\t\t// \t\tthis.onMapChanged({ \n\t\t\t// \t\t\tcenter: this.props.initialCenter || center, \n\t\t\t// \t\t\tzoom: this.props.initialZoom || zoom, \n\t\t\t// \t\t\tsize, \n\t\t\t// \t\t\tbounds \n\t\t\t// \t\t})\n\t\t\t// }\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { logs } = this.props\n\n\t\tlet Pin = this.props.pin.component || this.props.pin\n\t\tlet ClusterPin = this.props.cluster\n\t\t\t? this.props.cluster.component\n\t\t\t: this.props.clusterPin\n\t\t\t? this.props.clusterPin.component\n\t\t\t: this.props.defaultClusterPin\n\n\t\tconst { updatedLocations, zoom, center } = this.state\n\t\tif(logs){\n\t\t\tconsole.log(`ZOOM: `, zoom)\n\t\t\tconsole.log(`Center: `, center)\n\t\t}\n\t\treturn (\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\theight: this.props.height,\n\t\t\t\t\twidth: this.props.width,\n\t\t\t\t\tposition: 'relative'\n\t\t\t\t}}\n\t\t\t\tref={mapEl => (this.mapEl = mapEl)}\n\t\t\t>\n\t\t\t\t<div\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\ttop: 5,\n\t\t\t\t\t\tleft: 5,\n\t\t\t\t\t\tzIndex: 2\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<input\n\t\t\t\t\t\tclassName=\"storeLocatorInput\"\n\t\t\t\t\t\tstyle={searchStyle.searchInput}\n\t\t\t\t\t\tonChange={this.onPlaceChanged}\n\t\t\t\t\t\tref={input => (this.searchInput = input)}\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tplaceholder=\"Enter Your Location...\"\n\t\t\t\t\t\taria-label=\"search\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t{this.props.enableClusters && (\n\t\t\t\t\t<Script url=\"https://unpkg.com/kdbush@3.0.0/kdbush.min.js\" />\n\t\t\t\t)}\n\t\t\t\t<GoogleMap\n\t\t\t\t\tref={ref => (this.googleMapRef = ref)}\n\t\t\t\t\tonGoogleApiLoaded={this.handleGoogleMapApiLoad}\n\t\t\t\t\tbootstrapURLKeys={{ key: this.props.googleApiKey, region: this.props.region || `us`}}\n\t\t\t\t\tyesIWantToUseGoogleMapApiInternals\n\t\t\t\t\tonTilesLoaded={this.props.tilesRendered}\n\t\t\t\t\tcenter={this.props.center || center}\n\t\t\t\t\tzoom={this.props.zoom || zoom}\n\t\t\t\t\toptions={this.createMapOptions}\n\t\t\t\t\tonChange={this.onMapChanged}\n\t\t\t\t\tgestureHandling={this.props.gestureHandling || `cooperative`}\n\t\t\t\t>\n\t\t\t\t\t{updatedLocations.map((location, i) => {\n\t\t\t\t\t\tif (location.cluster_id) {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<ClusterPin\n\t\t\t\t\t\t\t\t\tkey={`${location.id}-${i}`}\n\t\t\t\t\t\t\t\t\tlat={location.lat}\n\t\t\t\t\t\t\t\t\tlng={location.lng}\n\t\t\t\t\t\t\t\t\tupdateMap={updates => this.onClusterClick(updates)}\n\t\t\t\t\t\t\t\t\t{...location}\n\t\t\t\t\t\t\t\t\tpinProps={\n\t\t\t\t\t\t\t\t\t  this.props.cluster ? this.props.cluster.pinProps : null\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Pin\n\t\t\t\t\t\t\t\tkey={location.id}\n\t\t\t\t\t\t\t\thandleLocationClick={this.toggleLocation}\n\t\t\t\t\t\t\t\tlat={location.lat}\n\t\t\t\t\t\t\t\tlng={location.lng}\n\t\t\t\t\t\t\t\t{...location}\n\t\t\t\t\t\t\t\t{...this.props}\n\t\t\t\t\t\t\t\tpinProps={this.props.pin.pinProps || null}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{!this.props.children ? (\n\t\t\t\t\t\t\t\t\t<Info show={location.show} style={this.props.infoStyle}>\n\t\t\t\t\t\t\t\t\t\t<div style={infoStyle.main}>\n\t\t\t\t\t\t\t\t\t\t\t{Object.keys(location).map((k, i) => {\n\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\tk === 'id' ||\n\t\t\t\t\t\t\t\t\t\t\t\t\tk === 'lat' ||\n\t\t\t\t\t\t\t\t\t\t\t\t\tk === 'lng' ||\n\t\t\t\t\t\t\t\t\t\t\t\t\tk === 'show'\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn null\n\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={k}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tk === 'name'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? { marginBottom: '12px' }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: { marginBottom: '2px' }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{`${location[k]}`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\t\tstyle={infoStyle.close}\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => this.closeLocation(location.id)}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t×\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Info>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\tthis.props.children(location, this.closeLocation)\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</Pin>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</GoogleMap>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nMap.defaultProps = {\n\tpin: Pin,\n\tdefaultClusterPin: ClusterPin,\n\tmapStyle: {},\n\theight: '800px',\n\twidth: '100%',\n\tdefaultCenter: { lat: 0, lng: 180 },\n\tdefaultZoom: 8\n}\n"]},"metadata":{},"sourceType":"script"}