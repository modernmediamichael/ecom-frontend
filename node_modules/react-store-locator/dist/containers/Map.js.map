{"version":3,"sources":["../../src/containers/Map.js"],"names":["Map","props","createMapOptions","bind","onMapChanged","toggleLocation","closeLocation","onPlaceChanged","handleGoogleMapApiLoad","onClusterClick","onMapStateChange","searchByQuery","state","updatedLocations","locations","center","lat","lng","zoom","place","mapLoaded","newBounds","searchInput","setState","console","warn","JSON","stringify","logs","log","bounds","ne","sw","foundLocations","filter","location","map","distanceMeters","geolib","getDistance","distanceMiles","toFixed","distanceFromCenter","enableClusters","cluster","clusters","length","radius","extent","nodeSize","minZoom","maxZoom","onChange","id","show","mapStyle","styles","mapOptions","getPlaceViewport","toString","e","target","value","searchBox","getPlace","submitSearch","moveMap","updatedAddress","getValue","getNorthEast","getSouthWest","size","mapEl","width","offsetWidth","height","offsetHeight","geometry","viewPortWithBounds","viewport","parseFloat","google","maps","LatLngBounds","extend","LatLng","defaultCenter","defaultZoom","getCenter","nw","se","googleMapRef","event","clearInstanceListeners","mapState","unsubscribe","subscribe","options","input","initSearch","places","Autocomplete","addListener","initialCenter","initialZoom","getLocationsViewport","prevProps","prevState","query","service","PlacesService","findPlaceFromQuery","fields","results","status","result","locationsViewport","PlacesServiceStatus","OK","Pin","pin","component","ClusterPin","clusterPin","defaultClusterPin","position","top","left","zIndex","searchStyle","ref","key","googleApiKey","region","tilesRendered","gestureHandling","i","cluster_id","updates","pinProps","children","infoStyle","main","Object","keys","k","marginBottom","close","Component","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;AAJA;IAMqBA,G;;;AACpB,cAAYC,KAAZ,EAAmB;AAAA;;AAAA,sHACZA,KADY;;AAGlB,QAAKC,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBC,IAAtB,OAAxB;AACA,QAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBD,IAAlB,OAApB;AACA,QAAKE,cAAL,GAAsB,MAAKA,cAAL,CAAoBF,IAApB,OAAtB;AACA,QAAKG,aAAL,GAAqB,MAAKA,aAAL,CAAmBH,IAAnB,OAArB;AACA,QAAKI,cAAL,GAAsB,MAAKA,cAAL,CAAoBJ,IAApB,OAAtB;AACA,QAAKK,sBAAL,GAA8B,MAAKA,sBAAL,CAA4BL,IAA5B,OAA9B;AACA,QAAKM,cAAL,GAAsB,MAAKA,cAAL,CAAoBN,IAApB,OAAtB;AACA,QAAKO,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBP,IAAtB,OAAxB;AACA,QAAKQ,aAAL,GAAqB,MAAKA,aAAL,CAAmBR,IAAnB,OAArB;;AAEA,QAAKS,KAAL,GAAa;AACZC,qBAAkB,MAAKZ,KAAL,CAAWa,SADjB;AAEZC,WAAQ,EAAEC,KAAK,CAAP,EAAUC,KAAK,CAAf,EAFI;AAGZC,SAAM,CAHM;AAIZC,UAAO,IAJK;AAKZC,cAAW,KALC;AAMZnB,UAAO,IANK;AAOZoB,cAAW,IAPC;AAQZC;AARY,GAAb;AAbkB;AAuBlB;;;;uCAEgC;AAAA,OAAhBJ,IAAgB,QAAhBA,IAAgB;AAAA,OAAVH,MAAU,QAAVA,MAAU;;AAChC,OAAIG,QAAQH,MAAZ,EAAoB;AACnB,SAAKQ,QAAL,CAAc,EAAEL,UAAF,EAAQH,cAAR,EAAd;AACA,IAFD,MAEO,IAAI,CAACG,IAAD,IAAS,CAACH,MAAd,EAAsB;AAC5BS,YAAQC,IAAR,yBACuBP,IADvB,qBAC2CQ,KAAKC,SAAL,CACzCZ,MADyC,CAD3C;AAaA;AACD;;AAED;;;;+BACad,K,EAAO;AACnB,OAAI,CAACA,KAAD,IAAU,CAAC,KAAKW,KAAL,CAAWQ,SAA1B,EAAqC;AACrC,OAAG,KAAKnB,KAAL,CAAW2B,IAAd,EAAoB;AACnBJ,YAAQK,GAAR,uBAAkC5B,KAAlC;AACA;;AAED,OAAM6B,SAAS;AACdC,QAAI;AACHf,UACCf,MAAM6B,MAAN,CAAaC,EAAb,CAAgBf,GAAhB,GAAsB,EAAtB,GACGf,MAAM6B,MAAN,CAAaC,EAAb,CAAgBf,GAAhB,GAAsB,GADzB,GAEGf,MAAM6B,MAAN,CAAaC,EAAb,CAAgBf,GAJjB;AAKHC,UACChB,MAAM6B,MAAN,CAAaC,EAAb,CAAgBd,GAAhB,GAAsB,GAAtB,GACGhB,MAAM6B,MAAN,CAAaC,EAAb,CAAgBd,GAAhB,GAAsB,GADzB,GAEGhB,MAAM6B,MAAN,CAAaC,EAAb,CAAgBd;AARjB,KADU;AAWde,QAAI;AACHhB,UACCf,MAAM6B,MAAN,CAAaE,EAAb,CAAgBhB,GAAhB,GAAsB,EAAtB,GACGf,MAAM6B,MAAN,CAAaE,EAAb,CAAgBhB,GAAhB,GAAsB,GADzB,GAEGf,MAAM6B,MAAN,CAAaE,EAAb,CAAgBhB,GAJjB;AAKHC,UACChB,MAAM6B,MAAN,CAAaE,EAAb,CAAgBf,GAAhB,GAAsB,GAAtB,GACGhB,MAAM6B,MAAN,CAAaE,EAAb,CAAgBf,GAAhB,GAAsB,GADzB,GAEGhB,MAAM6B,MAAN,CAAaE,EAAb,CAAgBf;AARjB;AAXU,IAAf;AAsBA,OAAMF,SAAS;AACdC,SAAKf,MAAMc,MAAN,CAAaC,GAAb,GAAmB,EAAnB,GAAwBf,MAAMc,MAAN,CAAaC,GAAb,GAAmB,GAA3C,GAAiDf,MAAMc,MAAN,CAAaC,GADrD;AAEdC,SAAKhB,MAAMc,MAAN,CAAaE,GAAb,GAAmB,GAAnB,GAAyBhB,MAAMc,MAAN,CAAaE,GAAb,GAAmB,GAA5C,GAAkDhB,MAAMc,MAAN,CAAaE;AAFtD,IAAf;;AA5BmB,OAiCXc,EAjCW,GAiCAD,MAjCA,CAiCXC,EAjCW;AAAA,OAiCPC,EAjCO,GAiCAF,MAjCA,CAiCPE,EAjCO;AAAA,OAkCXlB,SAlCW,GAkCG,KAAKb,KAlCR,CAkCXa,SAlCW;AAmCnB;;AAEA,OAAMmB,iBAAiBnB,UACrBoB,MADqB,CACd,oBAAY;AACnB,QAAMlB,MAAM,wBAAWmB,SAASnB,GAApB,EAAyB,CAAzB,CAAZ;AACA,QAAMC,MAAM,wBAAWkB,SAASlB,GAApB,EAAyB,CAAzB,CAAZ;AACA,WAAOD,OAAO,wBAAWgB,GAAGhB,GAAd,EAAmB,CAAnB,CAAP,IACNA,OAAO,wBAAWe,GAAGf,GAAd,EAAmB,CAAnB,CADD,IAENC,OAAO,wBAAWe,GAAGf,GAAd,EAAmB,CAAnB,CAFD,IAGNA,OAAO,wBAAWc,GAAGd,GAAd,EAAmB,CAAnB,CAHR;AAIA,IARqB,EASrBmB,GATqB,CASjB,oBAAY;AACf;AACA,QAAMC,iBAAiBC,iBAAOC,WAAP,CAAmBxB,MAAnB,EAA2B;AACjDC,UAAKmB,SAASnB,GADmC;AAEjDC,UAAKkB,SAASlB;AAFmC,KAA3B,CAAvB;AAIA,QAAMuB,gBAAgB,CAACH,iBAAiB,WAAlB,EAA+BI,OAA/B,CAAuC,CAAvC,CAAtB;AACA,sCAAYN,QAAZ,IAAsBO,oBAAoBF,aAA1C;AACD,IAjBqB,CAAvB;;AAmBA;AACA;AACA,OAAI,KAAKvC,KAAL,CAAW0C,cAAf,EAA+B;AAAA,QACtBC,OADsB,GACV,KAAK3C,KADK,CACtB2C,OADsB;;AAE9B,QAAMC,WAAW,gCAChB5C,KADgB,EAEhBgC,eAAea,MAAf,GAAwB,CAAxB,GAA4Bb,cAA5B,GAA6CnB,SAF7B,EAGhB8B,WAAWA,QAAQG,MAHH,EAIhBH,WAAWA,QAAQI,MAJH,EAKhBJ,WAAWA,QAAQK,QALH,EAMhBL,WAAWA,QAAQM,OANH,EAOhBN,WAAWA,QAAQO,OAPH,CAAjB;AASA;;AAEA,SAAK5B,QAAL,CAAc;AACbV,uBAAkBgC;AADL,KAAd;AAGA,IAhBD,MAgBO;AACN,SAAKtB,QAAL,CAAc,EAAEV,kBAAkBoB,cAApB,EAAd;AACA;;AAGD,OAAI,KAAKhC,KAAL,CAAWmD,QAAf,EAAyB;AACxB,QAAInB,cAAJ,EAAoB;AACnB,SAAG,KAAKhC,KAAL,CAAW2B,IAAd,EAAmB;AAClBJ,cAAQK,GAAR;AACAL,cAAQK,GAAR,qBAAgCI,eAAe,CAAf,CAAhC;AACA;AACD,UAAKhC,KAAL,CAAWmD,QAAX,CAAoBnB,cAApB;AACA;AACD;AACD;;;iCAEcoB,E,EAAI;AAClB,OAAMvC,YAAY,KAAKF,KAAL,CAAWC,gBAAX,CAA4BuB,GAA5B,CAAgC;AAAA,sCAC9CD,QAD8C;AAEjDmB,WAAMnB,SAASkB,EAAT,KAAgBA,EAAhB,GAAqB,CAAClB,SAASmB,IAA/B,GAAsC;AAFK;AAAA,IAAhC,CAAlB;AAIA,QAAK/B,QAAL,CAAc,EAAEV,kBAAkBC,SAApB,EAAd;AACA;;;gCAEauC,E,EAAI;AACjB,OAAMvC,YAAY,KAAKF,KAAL,CAAWC,gBAAX,CAA4BuB,GAA5B,CAAgC;AAAA,sCAC9CD,QAD8C;AAEjDmB,WAAM;AAF2C;AAAA,IAAhC,CAAlB;AAIA,QAAK/B,QAAL,CAAc,EAAEV,kBAAkBC,SAApB,EAAd;AACA;;;qCAEkB;AAAA,OACVyC,QADU,GACG,KAAKtD,KADR,CACVsD,QADU;AAAA,OAEVC,MAFU,GAEC,KAAKvD,KAAL,CAAWwD,UAFZ,CAEVD,MAFU;;AAGlB;AACCA,YAAQA,UAAUD;AADnB,MAEI,KAAKtD,KAAL,CAAWwD,UAFf;AAIA;;;0BAEOtC,K,EAAO;AACd,QAAKI,QAAL,CAAc,EAAEJ,YAAF,EAAd;;AADc,2BAEW,KAAKuC,gBAAL,CAAsBvC,KAAtB,CAFX;AAAA,OAENJ,MAFM,qBAENA,MAFM;AAAA,OAEEG,IAFF,qBAEEA,IAFF;;AAGd,QAAKK,QAAL,CAAc;AACbR,YAAQA,MADK;AAEbG,UAAMA,KAAKyC,QAAL,GAAgBb,MAAhB,GAAyB,CAAzB,GAA6B,CAA7B,GAAiC5B;AAF1B,IAAd;AAIA;;;iCAEc0C,C,EAAG;AACjB,OAAIA,CAAJ,EAAO;AACN,QAAIA,EAAEC,MAAF,CAASC,KAAb,EAAoB;AACnB,UAAKvC,QAAL,CAAc;AACbD,mBAAasC,EAAEC,MAAF,CAASC;AADT,MAAd;AAGA;AACD;;AAED,OAAI3C,QAAQ,KAAK4C,SAAL,CAAeC,QAAf,EAAZ;AACA,OAAI7C,SAASA,UAAU,KAAKP,KAAL,CAAWO,KAAlC,EAAyC;AACxC,QAAI,KAAKlB,KAAL,CAAWgE,YAAf,EAA6B;AAC5B,UAAKhE,KAAL,CAAWgE,YAAX,CAAwB9C,KAAxB;AACA;AACD,SAAK+C,OAAL,CAAa/C,KAAb;;AAEA,QAAMgD,iBAAiB,kCAAiBhD,KAAjB,CAAvB;AACA,QAAI,KAAKlB,KAAL,CAAWmE,QAAf,EAAyB;AACxB,UAAKnE,KAAL,CAAWmE,QAAX,CAAoBD,cAApB;AACA;AACD;AACD;;;qCAEkBrC,M,EAAQ;AAC1B,OAAMT,YAAY;AACjBU,QAAI;AACHf,UAAKc,OAAOuC,YAAP,GAAsBrD,GAAtB,EADF;AAEHC,UAAKa,OAAOuC,YAAP,GAAsBpD,GAAtB;AAFF,KADa;AAKjBe,QAAI;AACHhB,UAAKc,OAAOwC,YAAP,GAAsBtD,GAAtB,EADF;AAEHC,UAAKa,OAAOwC,YAAP,GAAsBrD,GAAtB;AAFF;AALa,IAAlB;AAUA,OAAIsD,OAAO,EAAX;AACA,OAAI,KAAKC,KAAT,EAAgB;AACfD,WAAO;AACNE,YAAO,KAAKD,KAAL,CAAWE,WADZ;AAENC,aAAQ,KAAKH,KAAL,CAAWI;AAFb,KAAP;AAIA;AACD,QAAKrD,QAAL,CAAc;AACbF,eAAW,sBAAUA,SAAV,EAAqBkD,IAArB,EAA2BlD;AADzB,IAAd;AAGA,UAAO,sBAAUA,SAAV,EAAqBkD,IAArB,CAAP;AACA;;;mCAEgBpD,K,EAAO;AAAA,OACf0D,QADe,GACF1D,KADE,CACf0D,QADe;;AAEvB,UAAO,KAAKC,kBAAL,CAAwBD,SAASE,QAAjC,CAAP;AACA;;;yCAEsB;AACtB,OAAIhE,eAAJ;AAAA,OAAYG,aAAZ;;AAEA,OAAI,KAAKjB,KAAL,CAAWa,SAAX,CAAqBgC,MAArB,KAAgC,CAApC,EAAuC;AACtC/B,aAAS;AACRC,UAAKgE,WAAW,KAAK/E,KAAL,CAAWa,SAAX,CAAqB,CAArB,EAAwBE,GAAnC,CADG;AAERC,UAAK+D,WAAW,KAAK/E,KAAL,CAAWa,SAAX,CAAqB,CAArB,EAAwBG,GAAnC;AAFG,KAAT;AAIA,IALD,MAKO;AACN,QAAMa,SAAS,IAAImD,OAAOC,IAAP,CAAYC,YAAhB,EAAf;AACA,SAAKlF,KAAL,CAAWa,SAAX,CAAqBsB,GAArB,CAAyB,oBAAY;AACpCN,YAAOsD,MAAP,CACC,IAAIH,OAAOC,IAAP,CAAYG,MAAhB,CACCL,WAAW7C,SAASnB,GAApB,CADD,EAECgE,WAAW7C,SAASlB,GAApB,CAFD,CADD;AAMA,KAPD;AAQA,QAAM8D,WAAW,KAAKD,kBAAL,CAAwBhD,MAAxB,CAAjB;AACAf,aAASgE,SAAShE,MAAlB;AACAG,WAAO6D,SAAS7D,IAAhB;AACA;;AAED,UAAO;AACNH,YAAQA,UAAU,KAAKd,KAAL,CAAWqF,aADvB;AAENpE,UAAMA,QAAQ,KAAKjB,KAAL,CAAWsF;AAFnB,IAAP;AAIA;;;mCAEgB;AAChB,OAAMzD,SAAS,IAAImD,OAAOC,IAAP,CAAYC,YAAhB,EAAf;AACA,QAAKlF,KAAL,CAAWa,SAAX,CAAqBsB,GAArB,CAAyB,oBAAY;AACpCN,WAAOsD,MAAP,CACC,IAAIH,OAAOC,IAAP,CAAYG,MAAhB,CACCL,WAAW7C,SAASnB,GAApB,CADD,EAECgE,WAAW7C,SAASlB,GAApB,CAFD,CADD;AAMA,IAPD;;AASA,OAAIF,eAAJ;AACA,OAAI,KAAKd,KAAL,CAAWa,SAAX,CAAqBgC,MAArB,KAAgC,CAApC,EAAuC;AACtC/B,aAAS;AACRC,UAAKgE,WAAW,KAAK/E,KAAL,CAAWa,SAAX,CAAqB,CAArB,EAAwBE,GAAnC,CADG;AAERC,UAAK+D,WAAW,KAAK/E,KAAL,CAAWa,SAAX,CAAqB,CAArB,EAAwBG,GAAnC;AAFG,KAAT;AAIA,IALD,MAKO;AACNF,aAAS;AACRC,UAAKc,OAAO0D,SAAP,GAAmBxE,GAAnB,EADG;AAERC,UAAKa,OAAO0D,SAAP,GAAmBvE,GAAnB;AAFG,KAAT;AAIA;;AAED,OAAIsD,OAAO;AACVE,WAAO,KAAKD,KAAL,CAAWE,WADR;AAEVC,YAAQ,KAAKH,KAAL,CAAWI;AAFT,IAAX;;AAKA,OAAMvD,YAAY;AACjBU,QAAI;AACHf,UAAKc,OAAOuC,YAAP,GAAsBrD,GAAtB,EADF;AAEHC,UAAKa,OAAOuC,YAAP,GAAsBpD,GAAtB;AAFF,KADa;AAKjBwE,QAAI;AACHzE,UAAKc,OAAOuC,YAAP,GAAsBrD,GAAtB,EADF;AAEHC,UAAKa,OAAOwC,YAAP,GAAsBrD,GAAtB;AAFF,KALa;AASjByE,QAAI;AACH1E,UAAKc,OAAOwC,YAAP,GAAsBtD,GAAtB,EADF;AAEHC,UAAKa,OAAOuC,YAAP,GAAsBpD,GAAtB;AAFF,KATa;AAajBe,QAAI;AACHhB,UAAKc,OAAOwC,YAAP,GAAsBtD,GAAtB,EADF;AAEHC,UAAKa,OAAOwC,YAAP,GAAsBrD,GAAtB;AAFF;AAba,IAAlB;;AAmBA,UAAO;AACNF,YAAQA,MADF;AAENG,UAAM,KAAKyE,YAAL,CAAkB1F,KAAlB,CAAwBiB,IAFxB;AAGNqD,cAHM;AAINzC,YAAQT;AAJF,IAAP;AAMA;;;mCAEgBT,K,EAAO;AAAA,OACfS,SADe,GACMT,KADN,CACfS,SADe;AAAA,OACJF,KADI,GACMP,KADN,CACJO,KADI;;AAEvB,OAAIA,KAAJ,EAAW;AACV,SAAKI,QAAL,CAAc,EAAEJ,YAAF,EAAd;AACA;AACD,OAAIE,SAAJ,EAAe;AACd,SAAKE,QAAL,CAAc,EAAEF,oBAAF,EAAd;AACA;AACD;;;yCAEsB;AACtB4D,UAAOC,IAAP,CAAYU,KAAZ,CAAkBC,sBAAlB,CAAyC,KAAK9B,SAA9C;AACA+B,oBAASC,WAAT,CAAqB,KAAKrF,gBAA1B;AACA;;;sCAEmB;AACnBoF,oBAASE,SAAT,CAAmB,KAAKtF,gBAAxB;AADmB,gBAES,KAAKT,KAFd;AAAA,OAEXgF,MAFW,UAEXA,MAFW;AAAA,OAEHgB,OAFG,UAEHA,OAFG;;AAGnB,OAAMC,QAAQ,KAAK5E,WAAnB;AACA,OAAI,KAAKrB,KAAL,CAAWkG,UAAf,EAA2B;AAC1BD,UAAMpC,KAAN,GAAc,KAAK7D,KAAL,CAAWkG,UAAzB;AACA;AACD,OAAID,KAAJ,EAAW;AACV,SAAKnC,SAAL,GAAiB,IAAIkB,OAAOC,IAAP,CAAYkB,MAAZ,CAAmBC,YAAvB,CAAoCH,KAApC,EAA2CD,OAA3C,CAAjB;AACA,SAAKlC,SAAL,CAAeuC,WAAf,CAA2B,eAA3B,EAA4C,KAAK/F,cAAjD;AACA,yCAAe2F,KAAf,EAAsB,KAAKnC,SAA3B;AACA;;AAED;AACA,OAAIwC,sBAAJ;AAAA,OAAmBC,oBAAnB;AACA;AACA,OAAI,CAAC,KAAKvG,KAAL,CAAWkG,UAAhB,EAA4B;AAC3B;AACA,QAAI,KAAKlG,KAAL,CAAWkB,KAAf,EAAsB;AAAA,8BACI,KAAKuC,gBAAL,CAAsB,KAAKzD,KAAL,CAAWkB,KAAjC,CADJ;AAAA,SACbJ,MADa,sBACbA,MADa;AAAA,SACLG,IADK,sBACLA,IADK;;AAErBqF,qBAAgBxF,MAAhB;AACAyF,mBAActF,IAAd;AACA;AACD;AALA,SAMK,IAAI,KAAKjB,KAAL,CAAWa,SAAX,IAAwB,KAAKb,KAAL,CAAWa,SAAX,CAAqBgC,MAArB,GAA8B,CAA1D,EAA6D;AAAA,kCACxC,KAAK2D,oBAAL,EADwC;AAAA,UACzD1F,OADyD,yBACzDA,MADyD;AAAA,UACjDG,KADiD,yBACjDA,IADiD;;AAEjEqF,sBAAgB,KAAKtG,KAAL,CAAWsG,aAAX,IAA4BxF,OAA5C;AACAyF,oBAAc,KAAKvG,KAAL,CAAWuG,WAAX,IAA0BtF,KAAxC;AACA;;AAED;AANK,UAOA;AACJqF,uBAAgB,KAAKtG,KAAL,CAAWsG,aAAX,IAA4B,KAAKtG,KAAL,CAAWsF,WAAvD;AACAiB,qBAAc,KAAKvG,KAAL,CAAWuG,WAAX,IAA0B,KAAKvG,KAAL,CAAWqF,aAAnD;AACA;AACD,SAAK/D,QAAL,CAAc;AACbL,WAAMsF,WADO;AAEbzF,aAAQwF;AAFK,KAAd;AAIA;AACD,QAAKhF,QAAL,CAAc,EAAEH,WAAW,IAAb,EAAd;AACA;;;qCAEkBsF,S,EAAWC,S,EAAW;AAAA,iBACV,KAAK1G,KADK;AAAA,OAChCkG,UADgC,WAChCA,UADgC;AAAA,OACpBhF,KADoB,WACpBA,KADoB;;AAExC,OAAIA,SAASuF,UAAUvF,KAAV,KAAoBA,KAA7B,IAAsCA,UAAU,KAAKP,KAAL,CAAWO,KAA/D,EAAsE;AACrE,SAAK+C,OAAL,CAAa/C,KAAb;AACA;AACD,OAAI,KAAKP,KAAL,CAAWO,KAAX,IAAoB,KAAKP,KAAL,CAAWO,KAAX,KAAqBwF,UAAUxF,KAAvD,EAA8D;AAC7D,SAAK+C,OAAL,CAAa,KAAKtD,KAAL,CAAWO,KAAxB;AACA;AACD,OAAIgF,cAAcO,UAAUP,UAAV,KAAyBA,UAA3C,EAAuD;AACtD,SAAKxF,aAAL,CAAmBwF,UAAnB;AACA;AACD;;;gCAEaS,K,EAAO;AAAA;;AACpB,OAAMC,UAAU,IAAI5B,OAAOC,IAAP,CAAYkB,MAAZ,CAAmBU,aAAvB,CAAqC,KAAK1E,GAA1C,CAAhB;AACAyE,WAAQE,kBAAR,CACC;AACCH,WAAOA,KADR;AAECI,YAAQ,CACP,QADO,EAEP,mBAFO,EAGP,MAHO,EAIP,QAJO,EAKP,eALO,EAMP,UANO;AAFT,IADD,EAYC,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpB,QAAMC,SAASF,UAAUA,QAAQ,CAAR,CAAV,GAAuB,IAAtC;;AAEA;AACA,QAAI,CAACE,MAAD,IAAWF,QAAQnE,MAAR,GAAiB,CAAhC,EAAmC;AAClCtB,aAAQC,IAAR,CAAa,+BAAb;AACA,SAAI2F,0BAAJ;;AAEA;AACA,SAAI,OAAKnH,KAAL,CAAWa,SAAX,IAAwB,OAAKb,KAAL,CAAWa,SAAX,CAAqBgC,MAArB,GAA8B,CAA1D,EAA6D;AAC5DsE,0BAAoB,OAAKX,oBAAL,EAApB;AACA;AACD,YAAKlF,QAAL,CAAc;AACbR,cAAQqG,kBAAkBrG,MAAlB,IAA4B,OAAKd,KAAL,CAAWqF,aADlC;AAEbpE,YAAMkG,kBAAkBlG,IAAlB,IAA0B,OAAKjB,KAAL,CAAWsF,WAF9B;AAGbnE,iBAAW;AAHE,MAAd;AAKA;AACD;AAdA,SAeK,IAAI8F,WAAWjC,OAAOC,IAAP,CAAYkB,MAAZ,CAAmBiB,mBAAnB,CAAuCC,EAAtD,EAA0D;AAAA,+BACrC,OAAK5D,gBAAL,CAAsByD,MAAtB,CADqC;AAAA,UACtDpG,MADsD,sBACtDA,MADsD;AAAA,UAC9CG,IAD8C,sBAC9CA,IAD8C;;AAE9D,aAAKK,QAAL,CAAc;AACbR,eAAQA,MADK;AAEbG,aAAMA,KAAKyC,QAAL,GAAgBb,MAAhB,GAAyB,CAAzB,GAA6B,CAA7B,GAAiC5B,IAF1B,EAEgC;AAC7CE,kBAAW;AAHE,OAAd;AAKA;AACD,IAvCF;AAyCA;;;gDAE+B;AAAA,OAAPgB,GAAO,SAAPA,GAAO;;AAC/B,QAAKA,GAAL,GAAWA,GAAX;;AAEA;AACA,OAAI,CAAC0D,iBAASlF,KAAT,CAAeO,KAApB,EAA2B;AAC1B,QAAI,KAAKlB,KAAL,CAAWkG,UAAf,EAA2B;AAC1B,UAAKxF,aAAL,CAAmB,KAAKV,KAAL,CAAWkG,UAA9B;AACA;AACD;;AAED,OAAI,KAAKlG,KAAL,CAAWmB,SAAf,EAA0B;AACzB,SAAKnB,KAAL,CAAWmB,SAAX;AACA;;AAED,QAAKG,QAAL,CAAc,EAAEH,WAAW,IAAb,EAAd;;AAGA;AACA;AACA;AACA,OAAI,CAAC,KAAKnB,KAAL,CAAWkG,UAAhB,EAA4B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;;2BAEQ;AAAA;;AAAA,OACAvE,IADA,GACS,KAAK3B,KADd,CACA2B,IADA;;;AAGR,OAAI2F,MAAM,KAAKtH,KAAL,CAAWuH,GAAX,CAAeC,SAAf,IAA4B,KAAKxH,KAAL,CAAWuH,GAAjD;AACA,OAAIE,aAAa,KAAKzH,KAAL,CAAW2C,OAAX,GACd,KAAK3C,KAAL,CAAW2C,OAAX,CAAmB6E,SADL,GAEd,KAAKxH,KAAL,CAAW0H,UAAX,GACA,KAAK1H,KAAL,CAAW0H,UAAX,CAAsBF,SADtB,GAEA,KAAKxH,KAAL,CAAW2H,iBAJd;;AAJQ,gBAUmC,KAAKhH,KAVxC;AAAA,OAUAC,gBAVA,UAUAA,gBAVA;AAAA,OAUkBK,IAVlB,UAUkBA,IAVlB;AAAA,OAUwBH,MAVxB,UAUwBA,MAVxB;;AAWR,OAAGa,IAAH,EAAQ;AACPJ,YAAQK,GAAR,WAAsBX,IAAtB;AACAM,YAAQK,GAAR,aAAwBd,MAAxB;AACA;AACD,UACC;AAAA;AAAA;AACC,YAAO;AACN4D,cAAQ,KAAK1E,KAAL,CAAW0E,MADb;AAENF,aAAO,KAAKxE,KAAL,CAAWwE,KAFZ;AAGNoD,gBAAU;AAHJ,MADR;AAMC,UAAK;AAAA,aAAU,OAAKrD,KAAL,GAAaA,KAAvB;AAAA;AANN;AAQC;AAAA;AAAA;AACC,aAAO;AACNqD,iBAAU,UADJ;AAENC,YAAK,CAFC;AAGNC,aAAM,CAHA;AAINC,eAAQ;AAJF;AADR;AAQC;AACC,iBAAU,mBADX;AAEC,aAAOC,sBAAY3G,WAFpB;AAGC,gBAAU,KAAKf,cAHhB;AAIC,WAAK;AAAA,cAAU,OAAKe,WAAL,GAAmB4E,KAA7B;AAAA,OAJN;AAKC,YAAK,MALN;AAMC,mBAAY,wBANb;AAOC,oBAAW;AAPZ;AARD,KARD;AA0BE,SAAKjG,KAAL,CAAW0C,cAAX,IACA,8BAAC,yBAAD,IAAQ,KAAI,8CAAZ,GA3BF;AA6BC;AAAC,6BAAD;AAAA;AACC,WAAK;AAAA,cAAQ,OAAKgD,YAAL,GAAoBuC,KAA5B;AAAA,OADN;AAEC,yBAAmB,KAAK1H,sBAFzB;AAGC,wBAAkB,EAAE2H,KAAK,KAAKlI,KAAL,CAAWmI,YAAlB,EAAgCC,QAAQ,KAAKpI,KAAL,CAAWoI,MAAX,QAAxC,EAHnB;AAIC,8CAJD;AAKC,qBAAe,KAAKpI,KAAL,CAAWqI,aAL3B;AAMC,cAAQ,KAAKrI,KAAL,CAAWc,MAAX,IAAqBA,MAN9B;AAOC,YAAM,KAAKd,KAAL,CAAWiB,IAAX,IAAmBA,IAP1B;AAQC,eAAS,KAAKhB,gBARf;AASC,gBAAU,KAAKE,YAThB;AAUC,uBAAiB,KAAKH,KAAL,CAAWsI,eAAX;AAVlB;AAYE1H,sBAAiBuB,GAAjB,CAAqB,UAACD,QAAD,EAAWqG,CAAX,EAAiB;AACtC,UAAIrG,SAASsG,UAAb,EAAyB;AACxB,cACC,8BAAC,UAAD;AACC,aAAQtG,SAASkB,EAAjB,SAAuBmF,CADxB;AAEC,aAAKrG,SAASnB,GAFf;AAGC,aAAKmB,SAASlB,GAHf;AAIC,mBAAW;AAAA,gBAAW,OAAKR,cAAL,CAAoBiI,OAApB,CAAX;AAAA;AAJZ,UAKKvG,QALL;AAMC,kBACE,OAAKlC,KAAL,CAAW2C,OAAX,GAAqB,OAAK3C,KAAL,CAAW2C,OAAX,CAAmB+F,QAAxC,GAAmD;AAPtD,UADD;AAYA;AACD,aACC;AAAC,UAAD;AAAA;AACC,aAAKxG,SAASkB,EADf;AAEC,6BAAqB,OAAKhD,cAF3B;AAGC,aAAK8B,SAASnB,GAHf;AAIC,aAAKmB,SAASlB;AAJf,UAKKkB,QALL,EAMK,OAAKlC,KANV;AAOC,kBAAU,OAAKA,KAAL,CAAWuH,GAAX,CAAemB,QAAf,IAA2B;AAPtC;AASE,QAAC,OAAK1I,KAAL,CAAW2I,QAAZ,GACA;AAAC,sBAAD;AAAA,UAAM,MAAMzG,SAASmB,IAArB,EAA2B,OAAO,OAAKrD,KAAL,CAAW4I,SAA7C;AACC;AAAA;AAAA,WAAK,OAAOA,oBAAUC,IAAtB;AACEC,gBAAOC,IAAP,CAAY7G,QAAZ,EAAsBC,GAAtB,CAA0B,UAAC6G,CAAD,EAAIT,CAAJ,EAAU;AACpC,cACCS,MAAM,IAAN,IACAA,MAAM,KADN,IAEAA,MAAM,KAFN,IAGAA,MAAM,MAJP,EAMC,OAAO,IAAP;AACD,iBACC;AAAA;AAAA;AACC,iBAAKA,CADN;AAEC,mBACCA,MAAM,MAAN,GACG,EAAEC,cAAc,MAAhB,EADH,GAEG,EAAEA,cAAc,KAAhB;AALL;AAAA,gBAQK/G,SAAS8G,CAAT;AARL,WADD;AAYA,UApBA,CADF;AAsBC;AAAA;AAAA;AACC,kBAAOJ,oBAAUM,KADlB;AAEC,oBAAS;AAAA,mBAAM,OAAK7I,aAAL,CAAmB6B,SAASkB,EAA5B,CAAN;AAAA;AAFV;AAAA;AAAA;AAtBD;AADD,QADA,GAiCA,OAAKpD,KAAL,CAAW2I,QAAX,CAAoBzG,QAApB,EAA8B,OAAK7B,aAAnC;AA1CF,OADD;AA+CA,MA9DA;AAZF;AA7BD,IADD;AA4GA;;;EApkB+B8I,gB,GAnBjC;;;kBAmBqBpJ,G;;;AAukBrBA,IAAIqJ,YAAJ,GAAmB;AAClB7B,MAAKD,aADa;AAElBK,oBAAmBF,oBAFD;AAGlBnE,WAAU,EAHQ;AAIlBoB,SAAQ,OAJU;AAKlBF,QAAO,MALW;AAMlBa,gBAAe,EAAEtE,KAAK,CAAP,EAAUC,KAAK,GAAf,EANG;AAOlBsE,cAAa;AAPK,CAAnB","file":"Map.js","sourcesContent":["/*global google*/\nimport React, { Component } from 'react'\nimport GoogleMap from 'google-map-react'\nimport { fitBounds } from 'google-map-react/utils'\nimport geolib from 'geolib'\nimport Script from 'react-load-script'\n\nimport Pin from './Pin'\nimport ClusterPin from './ClusterPin'\nimport Info from './Info'\nimport infoStyle from './InfoStyle'\nimport searchStyle from './SearchStyle'\nimport { createClusters } from '../utils/clustering'\n// import { objectsAreEqual } from '../utils/objects'\nimport { strToFixed } from '../utils/string'\nimport { addressFromPlace } from '../utils/parse-place'\nimport { enableEnterKey } from '../utils/suggestion-event'\nimport { mapState } from '../state'\n\nexport default class Map extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t\tthis.createMapOptions = this.createMapOptions.bind(this)\n\t\tthis.onMapChanged = this.onMapChanged.bind(this)\n\t\tthis.toggleLocation = this.toggleLocation.bind(this)\n\t\tthis.closeLocation = this.closeLocation.bind(this)\n\t\tthis.onPlaceChanged = this.onPlaceChanged.bind(this)\n\t\tthis.handleGoogleMapApiLoad = this.handleGoogleMapApiLoad.bind(this)\n\t\tthis.onClusterClick = this.onClusterClick.bind(this)\n\t\tthis.onMapStateChange = this.onMapStateChange.bind(this)\n\t\tthis.searchByQuery = this.searchByQuery.bind(this)\n\n\t\tthis.state = {\n\t\t\tupdatedLocations: this.props.locations,\n\t\t\tcenter: { lat: 0, lng: 0 },\n\t\t\tzoom: 6,\n\t\t\tplace: null,\n\t\t\tmapLoaded: false,\n\t\t\tprops: null,\n\t\t\tnewBounds: null,\n\t\t\tsearchInput: ``\n\t\t}\n\t}\n\n\tonClusterClick({ zoom, center }) {\n\t\tif (zoom && center) {\n\t\t\tthis.setState({ zoom, center })\n\t\t} else if (!zoom || !center) {\n\t\t\tconsole.warn(\n\t\t\t\t`Must include zoom: ${zoom} and center: ${JSON.stringify(\n\t\t\t\t\tcenter\n\t\t\t\t)} to update map properly. Try using the updateMap function passed through this.props.\n\t\t\t\tExample:\n\t\t\t\tonClick={() => {\n\t\t\t\t\tupdateMap({\n\t\t\t\t\t\tzoom: this.props.getZoom(this.props.cluster_id)\n\t\t\t\t\t\tcenter: { lat: this.props.lat, lng: this.props.lng }\n\t\t\t\t\t})\n\t\t\t\t}}\n\t\t\t\t`\n\t\t\t)\n\t\t}\n\t}\n\n\t// update visible locations on map change\n\tonMapChanged(props) {\n\t\tif (!props || !this.state.mapLoaded) return\n\t\tif(this.props.logs) { \n\t\t\tconsole.log(`MAP CHANGE PROPS: `, props)\n\t\t}\n\n\t\tconst bounds = {\n\t\t\tne: {\n\t\t\t\tlat:\n\t\t\t\t\tprops.bounds.ne.lat > 90\n\t\t\t\t\t\t? props.bounds.ne.lat - 180\n\t\t\t\t\t\t: props.bounds.ne.lat,\n\t\t\t\tlng:\n\t\t\t\t\tprops.bounds.ne.lng > 180\n\t\t\t\t\t\t? props.bounds.ne.lng - 360\n\t\t\t\t\t\t: props.bounds.ne.lng\n\t\t\t},\n\t\t\tsw: {\n\t\t\t\tlat:\n\t\t\t\t\tprops.bounds.sw.lat > 90\n\t\t\t\t\t\t? props.bounds.sw.lat - 180\n\t\t\t\t\t\t: props.bounds.sw.lat,\n\t\t\t\tlng:\n\t\t\t\t\tprops.bounds.sw.lng > 180\n\t\t\t\t\t\t? props.bounds.sw.lng - 360\n\t\t\t\t\t\t: props.bounds.sw.lng\n\t\t\t}\n\t\t}\n\t\tconst center = {\n\t\t\tlat: props.center.lat > 90 ? props.center.lat - 180 : props.center.lat,\n\t\t\tlng: props.center.lng > 180 ? props.center.lng - 360 : props.center.lng\n\t\t}\n\n\t\tconst { ne, sw } = bounds\n\t\tconst { locations } = this.props\n\t\t// locations within the map bounds\n\n\t\tconst foundLocations = locations\n\t\t\t.filter(location => {\n\t\t\t\tconst lat = strToFixed(location.lat, 6)\n\t\t\t\tconst lng = strToFixed(location.lng, 6)\n\t\t\t\treturn lat >= strToFixed(sw.lat, 6) &&\n\t\t\t\t\tlat <= strToFixed(ne.lat, 6) &&\n\t\t\t\t\tlng >= strToFixed(sw.lng, 6) &&\n\t\t\t\t\tlng <= strToFixed(ne.lng, 6)\n\t\t\t})\n\t\t\t.map(location => {\n\t\t\t\t\t// find the distance from the center for each location\n\t\t\t\t\tconst distanceMeters = geolib.getDistance(center, {\n\t\t\t\t\t\tlat: location.lat,\n\t\t\t\t\t\tlng: location.lng\n\t\t\t\t\t})\n\t\t\t\t\tconst distanceMiles = (distanceMeters * 0.000621371).toFixed(2)\n\t\t\t\t\treturn { ...location, distanceFromCenter: distanceMiles }\n\t\t\t})\n\n\t\t// console.log(`FOUND LOCATIONS`, foundLocations)\n\t\t// if enableClusters is enabled create clusters and set them to the state\n\t\tif (this.props.enableClusters) {\n\t\t\tconst { cluster } = this.props\n\t\t\tconst clusters = createClusters(\n\t\t\t\tprops,\n\t\t\t\tfoundLocations.length > 0 ? foundLocations : locations,\n\t\t\t\tcluster && cluster.radius,\n\t\t\t\tcluster && cluster.extent,\n\t\t\t\tcluster && cluster.nodeSize,\n\t\t\t\tcluster && cluster.minZoom,\n\t\t\t\tcluster && cluster.maxZoom\n\t\t\t)\n\t\t\t// console.log(`CLUSTERS: `, clusters)\n\n\t\t\tthis.setState({\n\t\t\t\tupdatedLocations: clusters\n\t\t\t})\n\t\t} else {\n\t\t\tthis.setState({ updatedLocations: foundLocations })\n\t\t}\n\n\n\t\tif (this.props.onChange) {\n\t\t\tif (foundLocations) {\n\t\t\t\tif(this.props.logs){\n\t\t\t\t\tconsole.log(`SENDING BACK FOUND LOCATIONS`)\n\t\t\t\t\tconsole.log(`First Location: `, foundLocations[0])\n\t\t\t\t}\n\t\t\t\tthis.props.onChange(foundLocations)\n\t\t\t}\n\t\t}\n\t}\n\n\ttoggleLocation(id) {\n\t\tconst locations = this.state.updatedLocations.map(location => ({\n\t\t\t...location,\n\t\t\tshow: location.id === id ? !location.show : false\n\t\t}))\n\t\tthis.setState({ updatedLocations: locations })\n\t}\n\n\tcloseLocation(id) {\n\t\tconst locations = this.state.updatedLocations.map(location => ({\n\t\t\t...location,\n\t\t\tshow: false\n\t\t}))\n\t\tthis.setState({ updatedLocations: locations })\n\t}\n\n\tcreateMapOptions() {\n\t\tconst { mapStyle } = this.props\n\t\tconst { styles } = this.props.mapOptions\n\t\treturn {\n\t\t\tstyles: styles || mapStyle,\n\t\t\t...this.props.mapOptions\n\t\t}\n\t}\n\n\tmoveMap(place) {\n\t\tthis.setState({ place })\n\t\tconst { center, zoom } = this.getPlaceViewport(place)\n\t\tthis.setState({\n\t\t\tcenter: center,\n\t\t\tzoom: zoom.toString().length > 1 ? 9 : zoom\n\t\t})\n\t}\n\n\tonPlaceChanged(e) {\n\t\tif (e) {\n\t\t\tif (e.target.value) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tsearchInput: e.target.value\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\tlet place = this.searchBox.getPlace()\n\t\tif (place && place !== this.state.place) {\n\t\t\tif (this.props.submitSearch) {\n\t\t\t\tthis.props.submitSearch(place)\n\t\t\t}\n\t\t\tthis.moveMap(place)\n\n\t\t\tconst updatedAddress = addressFromPlace(place)\n\t\t\tif (this.props.getValue) {\n\t\t\t\tthis.props.getValue(updatedAddress)\n\t\t\t}\n\t\t}\n\t}\n\n\tviewPortWithBounds(bounds) {\n\t\tconst newBounds = {\n\t\t\tne: {\n\t\t\t\tlat: bounds.getNorthEast().lat(),\n\t\t\t\tlng: bounds.getNorthEast().lng()\n\t\t\t},\n\t\t\tsw: {\n\t\t\t\tlat: bounds.getSouthWest().lat(),\n\t\t\t\tlng: bounds.getSouthWest().lng()\n\t\t\t}\n\t\t}\n\t\tlet size = {}\n\t\tif (this.mapEl) {\n\t\t\tsize = {\n\t\t\t\twidth: this.mapEl.offsetWidth,\n\t\t\t\theight: this.mapEl.offsetHeight\n\t\t\t}\n\t\t}\n\t\tthis.setState({\n\t\t\tnewBounds: fitBounds(newBounds, size).newBounds\n\t\t})\n\t\treturn fitBounds(newBounds, size)\n\t}\n\n\tgetPlaceViewport(place) {\n\t\tconst { geometry } = place\n\t\treturn this.viewPortWithBounds(geometry.viewport)\n\t}\n\n\tgetLocationsViewport() {\n\t\tlet center, zoom\n\n\t\tif (this.props.locations.length === 1) {\n\t\t\tcenter = {\n\t\t\t\tlat: parseFloat(this.props.locations[0].lat),\n\t\t\t\tlng: parseFloat(this.props.locations[0].lng)\n\t\t\t}\n\t\t} else {\n\t\t\tconst bounds = new google.maps.LatLngBounds()\n\t\t\tthis.props.locations.map(location => {\n\t\t\t\tbounds.extend(\n\t\t\t\t\tnew google.maps.LatLng(\n\t\t\t\t\t\tparseFloat(location.lat),\n\t\t\t\t\t\tparseFloat(location.lng)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t})\n\t\t\tconst viewport = this.viewPortWithBounds(bounds)\n\t\t\tcenter = viewport.center\n\t\t\tzoom = viewport.zoom\n\t\t}\n\n\t\treturn {\n\t\t\tcenter: center || this.props.defaultCenter,\n\t\t\tzoom: zoom || this.props.defaultZoom\n\t\t}\n\t}\n\n\tgetCurrentArea() {\n\t\tconst bounds = new google.maps.LatLngBounds()\n\t\tthis.props.locations.map(location => {\n\t\t\tbounds.extend(\n\t\t\t\tnew google.maps.LatLng(\n\t\t\t\t\tparseFloat(location.lat),\n\t\t\t\t\tparseFloat(location.lng)\n\t\t\t\t)\n\t\t\t)\n\t\t})\n\n\t\tlet center\n\t\tif (this.props.locations.length === 1) {\n\t\t\tcenter = {\n\t\t\t\tlat: parseFloat(this.props.locations[0].lat),\n\t\t\t\tlng: parseFloat(this.props.locations[0].lng)\n\t\t\t}\n\t\t} else {\n\t\t\tcenter = {\n\t\t\t\tlat: bounds.getCenter().lat(),\n\t\t\t\tlng: bounds.getCenter().lng()\n\t\t\t}\n\t\t}\n\n\t\tlet size = {\n\t\t\twidth: this.mapEl.offsetWidth,\n\t\t\theight: this.mapEl.offsetHeight\n\t\t}\n\n\t\tconst newBounds = {\n\t\t\tne: {\n\t\t\t\tlat: bounds.getNorthEast().lat(),\n\t\t\t\tlng: bounds.getNorthEast().lng()\n\t\t\t},\n\t\t\tnw: {\n\t\t\t\tlat: bounds.getNorthEast().lat(),\n\t\t\t\tlng: bounds.getSouthWest().lng()\n\t\t\t},\n\t\t\tse: {\n\t\t\t\tlat: bounds.getSouthWest().lat(),\n\t\t\t\tlng: bounds.getNorthEast().lng()\n\t\t\t},\n\t\t\tsw: {\n\t\t\t\tlat: bounds.getSouthWest().lat(),\n\t\t\t\tlng: bounds.getSouthWest().lng()\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tcenter: center,\n\t\t\tzoom: this.googleMapRef.props.zoom,\n\t\t\tsize,\n\t\t\tbounds: newBounds\n\t\t}\n\t}\n\n\tonMapStateChange(state) {\n\t\tconst { newBounds, place } = state\n\t\tif (place) {\n\t\t\tthis.setState({ place })\n\t\t}\n\t\tif (newBounds) {\n\t\t\tthis.setState({ newBounds })\n\t\t}\n\t}\n\n\tcomponentWillUnmount() {\n\t\tgoogle.maps.event.clearInstanceListeners(this.searchBox)\n\t\tmapState.unsubscribe(this.onMapStateChange)\n\t}\n\n\tcomponentDidMount() {\n\t\tmapState.subscribe(this.onMapStateChange)\n\t\tconst { google, options } = this.props\n\t\tconst input = this.searchInput\n\t\tif (this.props.initSearch) {\n\t\t\tinput.value = this.props.initSearch\n\t\t}\n\t\tif (input) {\n\t\t\tthis.searchBox = new google.maps.places.Autocomplete(input, options)\n\t\t\tthis.searchBox.addListener('place_changed', this.onPlaceChanged)\n\t\t\tenableEnterKey(input, this.searchBox)\n\t\t}\n\n\t\t// set default map location\n\t\tlet initialCenter, initialZoom\n\t\t// if initial location set by initSearch (D), location will be changed in handleGoogleMapApiLoad\n\t\tif (!this.props.initSearch) {\n\t\t\t// A. if initial location set by place => center map on it\n\t\t\tif (this.props.place) {\n\t\t\t\tconst { center, zoom } = this.getPlaceViewport(this.props.place)\n\t\t\t\tinitialCenter = center\n\t\t\t\tinitialZoom = zoom\n\t\t\t}\n\t\t\t// B. if initial location not set => center map on location(s) if any\n\t\t\telse if (this.props.locations && this.props.locations.length > 0) {\n\t\t\t\tconst { center, zoom } = this.getLocationsViewport()\n\t\t\t\tinitialCenter = this.props.initialCenter || center\n\t\t\t\tinitialZoom = this.props.initialZoom || zoom\n\t\t\t} \n\n\t\t\t// if initial location set by initialCenter and initialZoom\n\t\t\telse {\n\t\t\t\tinitialCenter = this.props.initialCenter || this.props.defaultZoom\n\t\t\t\tinitialZoom = this.props.initialZoom || this.props.defaultCenter\n\t\t\t}\n\t\t\tthis.setState({\n\t\t\t\tzoom: initialZoom,\n\t\t\t\tcenter: initialCenter ,\n\t\t\t})\n\t\t}\n\t\tthis.setState({ mapLoaded: true })\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tconst { initSearch, place } = this.props\n\t\tif (place && prevProps.place !== place && place !== this.state.place) {\n\t\t\tthis.moveMap(place)\n\t\t}\n\t\tif (this.state.place && this.state.place !== prevState.place) {\n\t\t\tthis.moveMap(this.state.place)\n\t\t}\n\t\tif (initSearch && prevProps.initSearch !== initSearch) {\n\t\t\tthis.searchByQuery(initSearch)\n\t\t}\n\t}\n\n\tsearchByQuery(query) {\n\t\tconst service = new google.maps.places.PlacesService(this.map)\n\t\tservice.findPlaceFromQuery(\n\t\t\t{\n\t\t\t\tquery: query,\n\t\t\t\tfields: [\n\t\t\t\t\t'photos',\n\t\t\t\t\t'formatted_address',\n\t\t\t\t\t'name',\n\t\t\t\t\t'rating',\n\t\t\t\t\t'opening_hours',\n\t\t\t\t\t'geometry'\n\t\t\t\t]\n\t\t\t},\n\t\t\t(results, status) => {\n\t\t\t\tconst result = results ? results[0] : null\n\n\t\t\t\t// no or invalid result from google PlacesService => center map on defaultCenter or locations\n\t\t\t\tif (!result || results.length < 1) {\n\t\t\t\t\tconsole.warn('No locations with given query')\n\t\t\t\t\tlet locationsViewport\n\n\t\t\t\t\t// center map on locations if any\n\t\t\t\t\tif (this.props.locations && this.props.locations.length > 0) {\n\t\t\t\t\t\tlocationsViewport = this.getLocationsViewport()\n\t\t\t\t\t}\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tcenter: locationsViewport.center || this.props.defaultCenter,\n\t\t\t\t\t\tzoom: locationsViewport.zoom || this.props.defaultZoom,\n\t\t\t\t\t\tmapLoaded: true\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\t// correct result from google PlacesService => set map location to it\n\t\t\t\telse if (status === google.maps.places.PlacesServiceStatus.OK) {\n\t\t\t\t\tconst { center, zoom } = this.getPlaceViewport(result)\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tcenter: center,\n\t\t\t\t\t\tzoom: zoom.toString().length > 1 ? 9 : zoom, // limit zoom to 9\n\t\t\t\t\t\tmapLoaded: true\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t)\n\t}\n\n\thandleGoogleMapApiLoad({ map }) {\n\t\tthis.map = map\n\n\t\t// D. if initial location set by initSearch => get location from it and center on it\n\t\tif (!mapState.state.place) {\n\t\t\tif (this.props.initSearch) {\n\t\t\t\tthis.searchByQuery(this.props.initSearch)\n\t\t\t}\n\t\t}\n\n\t\tif (this.props.mapLoaded) {\n\t\t\tthis.props.mapLoaded()\n\t\t}\n\n\t\tthis.setState({ mapLoaded: true })\n\n\n\t\t// if initial location was set before map was loaded in componentDidMount (case A, B or C), \n\t\t// callback onMapChanged with correct view data to update visible locations\n\t\t// this is not needed for case D because onMapChanged is automatically called when map is loaded\n\t\tif (!this.props.initSearch) {\n\t\t\t// \tif (this.props.locations && this.props.locations.length > 0) {\n\t\t\t// \t\tconst { center, zoom, size, bounds } = this.getCurrentArea()\n\t\t\t// \t\tthis.onMapChanged({ \n\t\t\t// \t\t\tcenter: this.props.initialCenter || center, \n\t\t\t// \t\t\tzoom: this.props.initialZoom || zoom, \n\t\t\t// \t\t\tsize, \n\t\t\t// \t\t\tbounds \n\t\t\t// \t\t})\n\t\t\t// }\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { logs } = this.props\n\n\t\tlet Pin = this.props.pin.component || this.props.pin\n\t\tlet ClusterPin = this.props.cluster\n\t\t\t? this.props.cluster.component\n\t\t\t: this.props.clusterPin\n\t\t\t? this.props.clusterPin.component\n\t\t\t: this.props.defaultClusterPin\n\n\t\tconst { updatedLocations, zoom, center } = this.state\n\t\tif(logs){\n\t\t\tconsole.log(`ZOOM: `, zoom)\n\t\t\tconsole.log(`Center: `, center)\n\t\t}\n\t\treturn (\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\theight: this.props.height,\n\t\t\t\t\twidth: this.props.width,\n\t\t\t\t\tposition: 'relative'\n\t\t\t\t}}\n\t\t\t\tref={mapEl => (this.mapEl = mapEl)}\n\t\t\t>\n\t\t\t\t<div\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\ttop: 5,\n\t\t\t\t\t\tleft: 5,\n\t\t\t\t\t\tzIndex: 2\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<input\n\t\t\t\t\t\tclassName=\"storeLocatorInput\"\n\t\t\t\t\t\tstyle={searchStyle.searchInput}\n\t\t\t\t\t\tonChange={this.onPlaceChanged}\n\t\t\t\t\t\tref={input => (this.searchInput = input)}\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tplaceholder=\"Enter Your Location...\"\n\t\t\t\t\t\taria-label=\"search\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t{this.props.enableClusters && (\n\t\t\t\t\t<Script url=\"https://unpkg.com/kdbush@3.0.0/kdbush.min.js\" />\n\t\t\t\t)}\n\t\t\t\t<GoogleMap\n\t\t\t\t\tref={ref => (this.googleMapRef = ref)}\n\t\t\t\t\tonGoogleApiLoaded={this.handleGoogleMapApiLoad}\n\t\t\t\t\tbootstrapURLKeys={{ key: this.props.googleApiKey, region: this.props.region || `us`}}\n\t\t\t\t\tyesIWantToUseGoogleMapApiInternals\n\t\t\t\t\tonTilesLoaded={this.props.tilesRendered}\n\t\t\t\t\tcenter={this.props.center || center}\n\t\t\t\t\tzoom={this.props.zoom || zoom}\n\t\t\t\t\toptions={this.createMapOptions}\n\t\t\t\t\tonChange={this.onMapChanged}\n\t\t\t\t\tgestureHandling={this.props.gestureHandling || `cooperative`}\n\t\t\t\t>\n\t\t\t\t\t{updatedLocations.map((location, i) => {\n\t\t\t\t\t\tif (location.cluster_id) {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<ClusterPin\n\t\t\t\t\t\t\t\t\tkey={`${location.id}-${i}`}\n\t\t\t\t\t\t\t\t\tlat={location.lat}\n\t\t\t\t\t\t\t\t\tlng={location.lng}\n\t\t\t\t\t\t\t\t\tupdateMap={updates => this.onClusterClick(updates)}\n\t\t\t\t\t\t\t\t\t{...location}\n\t\t\t\t\t\t\t\t\tpinProps={\n\t\t\t\t\t\t\t\t\t  this.props.cluster ? this.props.cluster.pinProps : null\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Pin\n\t\t\t\t\t\t\t\tkey={location.id}\n\t\t\t\t\t\t\t\thandleLocationClick={this.toggleLocation}\n\t\t\t\t\t\t\t\tlat={location.lat}\n\t\t\t\t\t\t\t\tlng={location.lng}\n\t\t\t\t\t\t\t\t{...location}\n\t\t\t\t\t\t\t\t{...this.props}\n\t\t\t\t\t\t\t\tpinProps={this.props.pin.pinProps || null}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{!this.props.children ? (\n\t\t\t\t\t\t\t\t\t<Info show={location.show} style={this.props.infoStyle}>\n\t\t\t\t\t\t\t\t\t\t<div style={infoStyle.main}>\n\t\t\t\t\t\t\t\t\t\t\t{Object.keys(location).map((k, i) => {\n\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\tk === 'id' ||\n\t\t\t\t\t\t\t\t\t\t\t\t\tk === 'lat' ||\n\t\t\t\t\t\t\t\t\t\t\t\t\tk === 'lng' ||\n\t\t\t\t\t\t\t\t\t\t\t\t\tk === 'show'\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn null\n\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={k}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tk === 'name'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? { marginBottom: '12px' }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: { marginBottom: '2px' }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{`${location[k]}`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\t\tstyle={infoStyle.close}\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => this.closeLocation(location.id)}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t×\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</Info>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\tthis.props.children(location, this.closeLocation)\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</Pin>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</GoogleMap>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nMap.defaultProps = {\n\tpin: Pin,\n\tdefaultClusterPin: ClusterPin,\n\tmapStyle: {},\n\theight: '800px',\n\twidth: '100%',\n\tdefaultCenter: { lat: 0, lng: 180 },\n\tdefaultZoom: 8\n}\n"]}